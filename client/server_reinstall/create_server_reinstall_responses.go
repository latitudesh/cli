package server_reinstall

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	"github.com/spf13/viper"

	apierrors "github.com/latitudesh/lsh/internal/api/errors"
)

// CreateServerReinstallReader is a Reader for the CreateServerReinstall structure.
type CreateServerReinstallReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateServerReinstallReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateServerReinstallCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := apierrors.NewUnauthorized()
		if err := result.ReadResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := apierrors.NewForbidden()
		if err := result.ReadResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := apierrors.NewNotFound()
		if err := result.ReadResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := apierrors.NewUnprocessableEntity()
		if err := result.ReadResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /servers/{server_id}/reinstall] create-server-reinstall", response, response.Code())
	}
}

// NewCreateServerReinstallCreated creates a CreateServerReinstallCreated with default headers values
func NewCreateServerReinstallCreated() *CreateServerReinstallCreated {
	return &CreateServerReinstallCreated{}
}

/*
CreateServerReinstallCreated describes a response with status code 201, with default header values.

Created
*/
type CreateServerReinstallCreated struct {
}

// IsSuccess returns true when this create server reinstall created response has a 2xx status code
func (o *CreateServerReinstallCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create server reinstall created response has a 3xx status code
func (o *CreateServerReinstallCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create server reinstall created response has a 4xx status code
func (o *CreateServerReinstallCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create server reinstall created response has a 5xx status code
func (o *CreateServerReinstallCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create server reinstall created response a status code equal to that given
func (o *CreateServerReinstallCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create server reinstall created response
func (o *CreateServerReinstallCreated) Code() int {
	return 201
}

func (o *CreateServerReinstallCreated) Error() string {
	return fmt.Sprintf("[POST /servers/{server_id}/reinstall][%d] createServerReinstallCreated ", 201)
}

func (o *CreateServerReinstallCreated) String() string {
	return fmt.Sprintf("[POST /servers/{server_id}/reinstall][%d] createServerReinstallCreated ", 201)
}

func (o *CreateServerReinstallCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

func (o *CreateServerReinstallCreated) Render() {
	formatAsJSON := viper.GetBool("json")

	if formatAsJSON {
		o.RenderJSON()
		return
	}

	formatOutputFlag := viper.GetString("output")

	switch formatOutputFlag {
	case "json":
		o.RenderJSON()
	case "table":
		o.RenderTable()
	default:
		fmt.Println("Unsupported output format")
	}
}

func (o *CreateServerReinstallCreated) RenderJSON() {
	fmt.Println("Successful reinstall!")
}

func (o *CreateServerReinstallCreated) RenderTable() {
	fmt.Println("Successful reinstall!")
}

/*
CreateServerReinstallBody create server reinstall body
swagger:model CreateServerReinstallBody
*/
type CreateServerReinstallBody struct {

	// data
	// Required: true
	Data *CreateServerReinstallParamsBodyData `json:"data"`
}

// Validate validates this create server reinstall body
func (o *CreateServerReinstallBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateServerReinstallBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create server reinstall body based on the context it is used
func (o *CreateServerReinstallBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateServerReinstallBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateServerReinstallBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateServerReinstallBody) UnmarshalBinary(b []byte) error {
	var res CreateServerReinstallBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateServerReinstallParamsBodyData create server reinstall params body data
swagger:model CreateServerReinstallParamsBodyData
*/
type CreateServerReinstallParamsBodyData struct {

	// attributes
	Attributes *CreateServerReinstallParamsBodyDataAttributes `json:"attributes,omitempty"`

	// type
	// Required: true
	// Enum: [reinstalls]
	Type *string `json:"type"`
}

// Validate validates this create server reinstall params body data
func (o *CreateServerReinstallParamsBodyData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateServerReinstallParamsBodyData) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(o.Attributes) { // not required
		return nil
	}

	if o.Attributes != nil {
		if err := o.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

var createServerReinstallParamsBodyDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["reinstalls"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createServerReinstallParamsBodyDataTypeTypePropEnum = append(createServerReinstallParamsBodyDataTypeTypePropEnum, v)
	}
}

const (

	// CreateServerReinstallParamsBodyDataTypeReinstalls captures enum value "reinstalls"
	CreateServerReinstallParamsBodyDataTypeReinstalls string = "reinstalls"
)

// prop value enum
func (o *CreateServerReinstallParamsBodyData) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createServerReinstallParamsBodyDataTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateServerReinstallParamsBodyData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("body"+"."+"data"+"."+"type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create server reinstall params body data based on the context it is used
func (o *CreateServerReinstallParamsBodyData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateServerReinstallParamsBodyData) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if o.Attributes != nil {

		if swag.IsZero(o.Attributes) { // not required
			return nil
		}

		if err := o.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateServerReinstallParamsBodyData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateServerReinstallParamsBodyData) UnmarshalBinary(b []byte) error {
	var res CreateServerReinstallParamsBodyData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateServerReinstallParamsBodyDataAttributes create server reinstall params body data attributes
swagger:model CreateServerReinstallParamsBodyDataAttributes
*/
type CreateServerReinstallParamsBodyDataAttributes struct {

	// The server hostname to set upon reinstall
	Hostname string `json:"hostname,omitempty"`

	// URL where iPXE script is stored on, necessary for custom image reinstalls. This attribute is required when operating system iPXE is selected.
	IpxeURL string `json:"ipxe_url,omitempty"`

	// The OS selected for the reinstall process
	// Enum: [ipxe windows_server_2019_std_v1 ubuntu_22_04_x64_lts debian_11 rockylinux_8 debian_10 rhel8 centos_7_4_x64 centos_8_x64 ubuntu_20_04_x64_lts debian_12 ubuntu22_ml_in_a_box windows2022]
	OperatingSystem string `json:"operating_system,omitempty"`

	// RAID mode for the server
	// Enum: [raid-0 raid-1]
	Raid string `json:"raid,omitempty"`

	// SSH Keys to set upon reinstall
	SSHKeys []string `json:"ssh_keys,omitempty"`

	// User data to set upon reinstall
	UserData int64 `json:"user_data,omitempty"`
}

// Validate validates this create server reinstall params body data attributes
func (o *CreateServerReinstallParamsBodyDataAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOperatingSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRaid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createServerReinstallParamsBodyDataAttributesTypeOperatingSystemPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ipxe","windows_server_2019_std_v1","ubuntu_22_04_x64_lts","debian_11","rockylinux_8","debian_10","rhel8","centos_7_4_x64","centos_8_x64","ubuntu_20_04_x64_lts","debian_12","ubuntu22_ml_in_a_box","windows2022"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createServerReinstallParamsBodyDataAttributesTypeOperatingSystemPropEnum = append(createServerReinstallParamsBodyDataAttributesTypeOperatingSystemPropEnum, v)
	}
}

const (

	// CreateServerReinstallParamsBodyDataAttributesOperatingSystemIpxe captures enum value "ipxe"
	CreateServerReinstallParamsBodyDataAttributesOperatingSystemIpxe string = "ipxe"

	// CreateServerReinstallParamsBodyDataAttributesOperatingSystemWindowsServer2019StdV1 captures enum value "windows_server_2019_std_v1"
	CreateServerReinstallParamsBodyDataAttributesOperatingSystemWindowsServer2019StdV1 string = "windows_server_2019_std_v1"

	// CreateServerReinstallParamsBodyDataAttributesOperatingSystemUbuntu2204X64Lts captures enum value "ubuntu_22_04_x64_lts"
	CreateServerReinstallParamsBodyDataAttributesOperatingSystemUbuntu2204X64Lts string = "ubuntu_22_04_x64_lts"

	// CreateServerReinstallParamsBodyDataAttributesOperatingSystemDebian11 captures enum value "debian_11"
	CreateServerReinstallParamsBodyDataAttributesOperatingSystemDebian11 string = "debian_11"

	// CreateServerReinstallParamsBodyDataAttributesOperatingSystemRockylinux8 captures enum value "rockylinux_8"
	CreateServerReinstallParamsBodyDataAttributesOperatingSystemRockylinux8 string = "rockylinux_8"

	// CreateServerReinstallParamsBodyDataAttributesOperatingSystemDebian10 captures enum value "debian_10"
	CreateServerReinstallParamsBodyDataAttributesOperatingSystemDebian10 string = "debian_10"

	// CreateServerReinstallParamsBodyDataAttributesOperatingSystemRhel8 captures enum value "rhel8"
	CreateServerReinstallParamsBodyDataAttributesOperatingSystemRhel8 string = "rhel8"

	// CreateServerReinstallParamsBodyDataAttributesOperatingSystemCentos74X64 captures enum value "centos_7_4_x64"
	CreateServerReinstallParamsBodyDataAttributesOperatingSystemCentos74X64 string = "centos_7_4_x64"

	// CreateServerReinstallParamsBodyDataAttributesOperatingSystemCentos8X64 captures enum value "centos_8_x64"
	CreateServerReinstallParamsBodyDataAttributesOperatingSystemCentos8X64 string = "centos_8_x64"

	// CreateServerReinstallParamsBodyDataAttributesOperatingSystemUbuntu2004X64Lts captures enum value "ubuntu_20_04_x64_lts"
	CreateServerReinstallParamsBodyDataAttributesOperatingSystemUbuntu2004X64Lts string = "ubuntu_20_04_x64_lts"

	// CreateServerReinstallParamsBodyDataAttributesOperatingSystemDebian12 captures enum value "debian_12"
	CreateServerReinstallParamsBodyDataAttributesOperatingSystemDebian12 string = "debian_12"

	// CreateServerReinstallParamsBodyDataAttributesOperatingSystemUbuntu22MlInaBox captures enum value "ubuntu22_ml_in_a_box"
	CreateServerReinstallParamsBodyDataAttributesOperatingSystemUbuntu22MlInaBox string = "ubuntu22_ml_in_a_box"

	// CreateServerReinstallParamsBodyDataAttributesOperatingSystemWindows2022 captures enum value "windows2022"
	CreateServerReinstallParamsBodyDataAttributesOperatingSystemWindows2022 string = "windows2022"
)

// prop value enum
func (o *CreateServerReinstallParamsBodyDataAttributes) validateOperatingSystemEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createServerReinstallParamsBodyDataAttributesTypeOperatingSystemPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateServerReinstallParamsBodyDataAttributes) validateOperatingSystem(formats strfmt.Registry) error {
	if swag.IsZero(o.OperatingSystem) { // not required
		return nil
	}

	// value enum
	if err := o.validateOperatingSystemEnum("body"+"."+"data"+"."+"attributes"+"."+"operating_system", "body", o.OperatingSystem); err != nil {
		return err
	}

	return nil
}

var createServerReinstallParamsBodyDataAttributesTypeRaidPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["raid-0","raid-1"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createServerReinstallParamsBodyDataAttributesTypeRaidPropEnum = append(createServerReinstallParamsBodyDataAttributesTypeRaidPropEnum, v)
	}
}

const (

	// CreateServerReinstallParamsBodyDataAttributesRaidRaidDash0 captures enum value "raid-0"
	CreateServerReinstallParamsBodyDataAttributesRaidRaidDash0 string = "raid-0"

	// CreateServerReinstallParamsBodyDataAttributesRaidRaidDash1 captures enum value "raid-1"
	CreateServerReinstallParamsBodyDataAttributesRaidRaidDash1 string = "raid-1"
)

// prop value enum
func (o *CreateServerReinstallParamsBodyDataAttributes) validateRaidEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createServerReinstallParamsBodyDataAttributesTypeRaidPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateServerReinstallParamsBodyDataAttributes) validateRaid(formats strfmt.Registry) error {
	if swag.IsZero(o.Raid) { // not required
		return nil
	}

	// value enum
	if err := o.validateRaidEnum("body"+"."+"data"+"."+"attributes"+"."+"raid", "body", o.Raid); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create server reinstall params body data attributes based on context it is used
func (o *CreateServerReinstallParamsBodyDataAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateServerReinstallParamsBodyDataAttributes) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateServerReinstallParamsBodyDataAttributes) UnmarshalBinary(b []byte) error {
	var res CreateServerReinstallParamsBodyDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
