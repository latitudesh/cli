// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetServersParams creates a new GetServersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetServersParams() *GetServersParams {
	return &GetServersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetServersParamsWithTimeout creates a new GetServersParams object
// with the ability to set a timeout on a request.
func NewGetServersParamsWithTimeout(timeout time.Duration) *GetServersParams {
	return &GetServersParams{
		timeout: timeout,
	}
}

// NewGetServersParamsWithContext creates a new GetServersParams object
// with the ability to set a context for a request.
func NewGetServersParamsWithContext(ctx context.Context) *GetServersParams {
	return &GetServersParams{
		Context: ctx,
	}
}

// NewGetServersParamsWithHTTPClient creates a new GetServersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetServersParamsWithHTTPClient(client *http.Client) *GetServersParams {
	return &GetServersParams{
		HTTPClient: client,
	}
}

/*
GetServersParams contains all the parameters to send to the API endpoint

	for the get servers operation.

	Typically these are written to a http.Request.
*/
type GetServersParams struct {

	/* ExtraFieldsServers.

	   The `credentials` are provided as extra attributes that is lazy loaded. To request it, just set `extra_fields[servers]=credentials` in the query string.
	*/
	ExtraFieldsServers *string

	/* FilterCreatedAtGte.

	   The created at greater than equal date to filter by
	*/
	FilterCreatedAtGte *string

	/* FilterCreatedAtLte.

	   The created at less than equal date to filter by
	*/
	FilterCreatedAtLte *string

	/* FilterDisk.

	   The disk size in Gigabytes to filter by, should be used with the following options:
	                            [eql] to filter for values equal to the provided value.
	                            [gte] to filter for values greater or equal to the provided value.
	                            [lte] to filter by values lower or equal to the provided value.
	*/
	FilterDiskEql *int64
	FilterDiskLte *int64
	FilterDiskGte *int64

	/* FilterGpu.

	   Filter by the existence of an associated GPU
	*/
	FilterGpu *bool

	/* FilterHostname.

	   The hostname of server to filter by
	*/
	FilterHostname *string

	/* FilterLabel.

	   The label of server to filter by
	*/
	FilterLabel *string

	/* FilterOperatingSystem.

	   The operating system name or slug of the server to filter by
	*/
	FilterOperatingSystem *string

	/* FilterPlan.

	   The platform/plan name of the server to filter by
	*/
	FilterPlan *string

	/* FilterProject.

	   The project ID or Slug to filter by
	*/
	FilterProject *string

	/* FilterRAMEql.

	   Filter servers with RAM size (in GB) equals the provided value.
	*/
	FilterRAMEql *int64

	/* FilterRAMGte.

	   Filter servers with RAM size (in GB) greater than or equal the provided value.
	*/
	FilterRAMGte *int64

	/* FilterRAMLte.

	   Filter servers with RAM size (in GB) less than or equal the provided value.
	*/
	FilterRAMLte *int64

	/* FilterRegion.

	   The region Slug to filter by
	*/
	FilterRegion *string

	/* FilterStatus.

	   The status of server to filter by
	*/
	FilterStatus *string

	FilterTags *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get servers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetServersParams) WithDefaults() *GetServersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get servers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetServersParams) SetDefaults() {
	val := GetServersParams{}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get servers params
func (o *GetServersParams) WithTimeout(timeout time.Duration) *GetServersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get servers params
func (o *GetServersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get servers params
func (o *GetServersParams) WithContext(ctx context.Context) *GetServersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get servers params
func (o *GetServersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get servers params
func (o *GetServersParams) WithHTTPClient(client *http.Client) *GetServersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get servers params
func (o *GetServersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExtraFieldsServers adds the extraFieldsServers to the get servers params
func (o *GetServersParams) WithExtraFieldsServers(extraFieldsServers *string) *GetServersParams {
	o.SetExtraFieldsServers(extraFieldsServers)
	return o
}

// SetExtraFieldsServers adds the extraFieldsServers to the get servers params
func (o *GetServersParams) SetExtraFieldsServers(extraFieldsServers *string) {
	o.ExtraFieldsServers = extraFieldsServers
}

// WithFilterCreatedAtGte adds the filterCreatedAtGte to the get servers params
func (o *GetServersParams) WithFilterCreatedAtGte(filterCreatedAtGte *string) *GetServersParams {
	o.SetFilterCreatedAtGte(filterCreatedAtGte)
	return o
}

// SetFilterCreatedAtGte adds the filterCreatedAtGte to the get servers params
func (o *GetServersParams) SetFilterCreatedAtGte(filterCreatedAtGte *string) {
	o.FilterCreatedAtGte = filterCreatedAtGte
}

// WithFilterCreatedAtLte adds the filterCreatedAtLte to the get servers params
func (o *GetServersParams) WithFilterCreatedAtLte(filterCreatedAtLte *string) *GetServersParams {
	o.SetFilterCreatedAtLte(filterCreatedAtLte)
	return o
}

// SetFilterCreatedAtLte adds the filterCreatedAtLte to the get servers params
func (o *GetServersParams) SetFilterCreatedAtLte(filterCreatedAtLte *string) {
	o.FilterCreatedAtLte = filterCreatedAtLte
}

// WithFilterDiskEql adds the filterDiskEql to the get servers params
func (o *GetServersParams) WithFilterDiskEql(filterDiskEql *int64) *GetServersParams {
	o.SetFilterDiskEql(filterDiskEql)
	return o
}

// WithFilterDiskLte adds the filterDiskLte to the get servers params
func (o *GetServersParams) WithFilterDiskLte(filterDiskLte *int64) *GetServersParams {
	o.SetFilterDiskLte(filterDiskLte)
	return o
}

// WithFilterDiskGte adds the filterDiskGte to the get servers params
func (o *GetServersParams) WithFilterDiskGte(filterDiskGte *int64) *GetServersParams {
	o.SetFilterDiskGte(filterDiskGte)
	return o
}

// SetFilterDiskEql adds the filterDiskEql to the get servers params
func (o *GetServersParams) SetFilterDiskEql(filterDiskEql *int64) {
	o.FilterDiskEql = filterDiskEql
}

// SetFilterDiskLte adds the filterDiskLte to the get servers params
func (o *GetServersParams) SetFilterDiskLte(filterDiskLte *int64) {
	o.FilterDiskLte = filterDiskLte
}

// SetFilterDiskGte adds the filterDiskGte to the get servers params
func (o *GetServersParams) SetFilterDiskGte(filterDiskGte *int64) {
	o.FilterDiskGte = filterDiskGte
}

// WithFilterGpu adds the filterGpu to the get servers params
func (o *GetServersParams) WithFilterGpu(filterGpu *bool) *GetServersParams {
	o.SetFilterGpu(filterGpu)
	return o
}

// SetFilterGpu adds the filterGpu to the get servers params
func (o *GetServersParams) SetFilterGpu(filterGpu *bool) {
	o.FilterGpu = filterGpu
}

// WithFilterHostname adds the filterHostname to the get servers params
func (o *GetServersParams) WithFilterHostname(filterHostname *string) *GetServersParams {
	o.SetFilterHostname(filterHostname)
	return o
}

// SetFilterHostname adds the filterHostname to the get servers params
func (o *GetServersParams) SetFilterHostname(filterHostname *string) {
	o.FilterHostname = filterHostname
}

// WithFilterLabel adds the filterLabel to the get servers params
func (o *GetServersParams) WithFilterLabel(filterLabel *string) *GetServersParams {
	o.SetFilterLabel(filterLabel)
	return o
}

// SetFilterLabel adds the filterLabel to the get servers params
func (o *GetServersParams) SetFilterLabel(filterLabel *string) {
	o.FilterLabel = filterLabel
}

// WithFilterOperatingSystem adds the filterOperatingSystem to the get servers params
func (o *GetServersParams) WithFilterOperatingSystem(filterOperatingSystem *string) *GetServersParams {
	o.SetFilterOperatingSystem(filterOperatingSystem)
	return o
}

// SetFilterOperatingSystem adds the filterOperatingSystem to the get servers params
func (o *GetServersParams) SetFilterOperatingSystem(filterOperatingSystem *string) {
	o.FilterOperatingSystem = filterOperatingSystem
}

// WithFilterPlan adds the filterPlan to the get servers params
func (o *GetServersParams) WithFilterPlan(filterPlan *string) *GetServersParams {
	o.SetFilterPlan(filterPlan)
	return o
}

// SetFilterPlan adds the filterPlan to the get servers params
func (o *GetServersParams) SetFilterPlan(filterPlan *string) {
	o.FilterPlan = filterPlan
}

// WithFilterProject adds the filterProject to the get servers params
func (o *GetServersParams) WithFilterProject(filterProject *string) *GetServersParams {
	o.SetFilterProject(filterProject)
	return o
}

// SetFilterProject adds the filterProject to the get servers params
func (o *GetServersParams) SetFilterProject(filterProject *string) {
	o.FilterProject = filterProject
}

// WithFilterRAMEql adds the filterRAMEql to the get servers params
func (o *GetServersParams) WithFilterRAMEql(filterRAMEql *int64) *GetServersParams {
	o.SetFilterRAMEql(filterRAMEql)
	return o
}

// SetFilterRAMEql adds the filterRamEql to the get servers params
func (o *GetServersParams) SetFilterRAMEql(filterRAMEql *int64) {
	o.FilterRAMEql = filterRAMEql
}

// WithFilterRAMGte adds the filterRAMGte to the get servers params
func (o *GetServersParams) WithFilterRAMGte(filterRAMGte *int64) *GetServersParams {
	o.SetFilterRAMGte(filterRAMGte)
	return o
}

// SetFilterRAMGte adds the filterRamGte to the get servers params
func (o *GetServersParams) SetFilterRAMGte(filterRAMGte *int64) {
	o.FilterRAMGte = filterRAMGte
}

// WithFilterRAMLte adds the filterRAMLte to the get servers params
func (o *GetServersParams) WithFilterRAMLte(filterRAMLte *int64) *GetServersParams {
	o.SetFilterRAMLte(filterRAMLte)
	return o
}

// SetFilterRAMLte adds the filterRamLte to the get servers params
func (o *GetServersParams) SetFilterRAMLte(filterRAMLte *int64) {
	o.FilterRAMLte = filterRAMLte
}

// WithFilterRegion adds the filterRegion to the get servers params
func (o *GetServersParams) WithFilterRegion(filterRegion *string) *GetServersParams {
	o.SetFilterRegion(filterRegion)
	return o
}

// SetFilterRegion adds the filterRegion to the get servers params
func (o *GetServersParams) SetFilterRegion(filterRegion *string) {
	o.FilterRegion = filterRegion
}

// WithFilterStatus adds the filterStatus to the get servers params
func (o *GetServersParams) WithFilterStatus(filterStatus *string) *GetServersParams {
	o.SetFilterStatus(filterStatus)
	return o
}

// SetFilterStatus adds the filterStatus to the get servers params
func (o *GetServersParams) SetFilterStatus(filterStatus *string) {
	o.FilterStatus = filterStatus
}

func (o *GetServersParams) WithFilterTags(filterTags *string) *GetServersParams {
	o.SetFilterTags(filterTags)
	return o
}

func (o *GetServersParams) SetFilterTags(filterTags *string) {
	o.FilterTags = filterTags
}

// WriteToRequest writes these params to a swagger request
func (o *GetServersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetQueryParam("page[size]", "100"); err != nil {
		return err
	}

	if o.ExtraFieldsServers != nil {

		// query param extra_fields[servers]
		var qrExtraFieldsServers string

		if o.ExtraFieldsServers != nil {
			qrExtraFieldsServers = *o.ExtraFieldsServers
		}
		qExtraFieldsServers := qrExtraFieldsServers
		if qExtraFieldsServers != "" {

			if err := r.SetQueryParam("extra_fields[servers]", qExtraFieldsServers); err != nil {
				return err
			}
		}
	}

	if o.FilterCreatedAtGte != nil {

		// query param filter[created_at_gte]
		var qrFilterCreatedAtGte string

		if o.FilterCreatedAtGte != nil {
			qrFilterCreatedAtGte = *o.FilterCreatedAtGte
		}
		qFilterCreatedAtGte := qrFilterCreatedAtGte
		if qFilterCreatedAtGte != "" {

			if err := r.SetQueryParam("filter[created_at_gte]", qFilterCreatedAtGte); err != nil {
				return err
			}
		}
	}

	if o.FilterCreatedAtLte != nil {

		// query param filter[created_at_lte]
		var qrFilterCreatedAtLte string

		if o.FilterCreatedAtLte != nil {
			qrFilterCreatedAtLte = *o.FilterCreatedAtLte
		}
		qFilterCreatedAtLte := qrFilterCreatedAtLte
		if qFilterCreatedAtLte != "" {

			if err := r.SetQueryParam("filter[created_at_lte]", qFilterCreatedAtLte); err != nil {
				return err
			}
		}
	}

	if o.FilterDiskEql != nil {

		// query param filter[disk]
		var qrFilterDiskEql int64

		if o.FilterDiskEql != nil {
			qrFilterDiskEql = *o.FilterDiskEql
		}
		qFilterDiskEql := swag.FormatInt64(qrFilterDiskEql)
		if qFilterDiskEql != "" {

			if err := r.SetQueryParam("filter[disk][eql]", qFilterDiskEql); err != nil {
				return err
			}
		}
	}

	if o.FilterDiskLte != nil {

		// query param filter[disk]
		var qrFilterDiskLte int64

		if o.FilterDiskLte != nil {
			qrFilterDiskLte = *o.FilterDiskLte
		}
		qFilterDiskLte := swag.FormatInt64(qrFilterDiskLte)
		if qFilterDiskLte != "" {

			if err := r.SetQueryParam("filter[disk][lte]", qFilterDiskLte); err != nil {
				return err
			}
		}
	}

	if o.FilterDiskGte != nil {

		// query param filter[disk]
		var qrFilterDiskGte int64

		if o.FilterDiskGte != nil {
			qrFilterDiskGte = *o.FilterDiskGte
		}
		qFilterDiskGte := swag.FormatInt64(qrFilterDiskGte)
		if qFilterDiskGte != "" {

			if err := r.SetQueryParam("filter[disk][gte]", qFilterDiskGte); err != nil {
				return err
			}
		}
	}

	if o.FilterGpu != nil {

		// query param filter[gpu]
		var qrFilterGpu bool

		if o.FilterGpu != nil {
			qrFilterGpu = *o.FilterGpu
		}
		qFilterGpu := swag.FormatBool(qrFilterGpu)
		if qFilterGpu != "" {

			if err := r.SetQueryParam("filter[gpu]", qFilterGpu); err != nil {
				return err
			}
		}
	}

	if o.FilterHostname != nil {

		// query param filter[hostname]
		var qrFilterHostname string

		if o.FilterHostname != nil {
			qrFilterHostname = *o.FilterHostname
		}
		qFilterHostname := qrFilterHostname
		if qFilterHostname != "" {

			if err := r.SetQueryParam("filter[hostname]", qFilterHostname); err != nil {
				return err
			}
		}
	}

	if o.FilterLabel != nil {

		// query param filter[label]
		var qrFilterLabel string

		if o.FilterLabel != nil {
			qrFilterLabel = *o.FilterLabel
		}
		qFilterLabel := qrFilterLabel
		if qFilterLabel != "" {

			if err := r.SetQueryParam("filter[label]", qFilterLabel); err != nil {
				return err
			}
		}
	}

	if o.FilterOperatingSystem != nil {

		// query param filter[operating_system]
		var qrFilterOperatingSystem string

		if o.FilterOperatingSystem != nil {
			qrFilterOperatingSystem = *o.FilterOperatingSystem
		}
		qFilterOperatingSystem := qrFilterOperatingSystem
		if qFilterOperatingSystem != "" {

			if err := r.SetQueryParam("filter[operating_system]", qFilterOperatingSystem); err != nil {
				return err
			}
		}
	}

	if o.FilterPlan != nil {

		// query param filter[plan]
		var qrFilterPlan string

		if o.FilterPlan != nil {
			qrFilterPlan = *o.FilterPlan
		}
		qFilterPlan := qrFilterPlan
		if qFilterPlan != "" {

			if err := r.SetQueryParam("filter[plan]", qFilterPlan); err != nil {
				return err
			}
		}
	}

	if o.FilterProject != nil {

		// query param filter[project]
		var qrFilterProject string

		if o.FilterProject != nil {
			qrFilterProject = *o.FilterProject
		}
		qFilterProject := qrFilterProject
		if qFilterProject != "" {

			if err := r.SetQueryParam("filter[project]", qFilterProject); err != nil {
				return err
			}
		}
	}

	if o.FilterRAMEql != nil {

		// query param filter[ram][eql]
		var qrFilterRAMEql int64

		if o.FilterRAMEql != nil {
			qrFilterRAMEql = *o.FilterRAMEql
		}
		qFilterRAMEql := swag.FormatInt64(qrFilterRAMEql)
		if qFilterRAMEql != "" {

			if err := r.SetQueryParam("filter[ram][eql]", qFilterRAMEql); err != nil {
				return err
			}
		}
	}

	if o.FilterRAMGte != nil {

		// query param filter[ram][gte]
		var qrFilterRAMGte int64

		if o.FilterRAMGte != nil {
			qrFilterRAMGte = *o.FilterRAMGte
		}
		qFilterRAMGte := swag.FormatInt64(qrFilterRAMGte)
		if qFilterRAMGte != "" {

			if err := r.SetQueryParam("filter[ram][gte]", qFilterRAMGte); err != nil {
				return err
			}
		}
	}

	if o.FilterRAMLte != nil {

		// query param filter[ram][lte]
		var qrFilterRAMLte int64

		if o.FilterRAMLte != nil {
			qrFilterRAMLte = *o.FilterRAMLte
		}
		qFilterRAMLte := swag.FormatInt64(qrFilterRAMLte)
		if qFilterRAMLte != "" {

			if err := r.SetQueryParam("filter[ram][lte]", qFilterRAMLte); err != nil {
				return err
			}
		}
	}

	if o.FilterRegion != nil {

		// query param filter[region]
		var qrFilterRegion string

		if o.FilterRegion != nil {
			qrFilterRegion = *o.FilterRegion
		}
		qFilterRegion := qrFilterRegion
		if qFilterRegion != "" {

			if err := r.SetQueryParam("filter[region]", qFilterRegion); err != nil {
				return err
			}
		}
	}

	if o.FilterStatus != nil {

		// query param filter[status]
		var qrFilterStatus string

		if o.FilterStatus != nil {
			qrFilterStatus = *o.FilterStatus
		}
		qFilterStatus := qrFilterStatus
		if qFilterStatus != "" {

			if err := r.SetQueryParam("filter[status]", qFilterStatus); err != nil {
				return err
			}
		}
	}

	if o.FilterTags != nil {

		var qrFilterTags string

		if o.FilterTags != nil {
			qrFilterTags = *o.FilterTags
		}
		qFilterTags := qrFilterTags
		if qFilterTags != "" {

			if err := r.SetQueryParam("filter[tags]", qFilterTags); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
