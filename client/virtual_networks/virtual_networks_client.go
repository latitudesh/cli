// Code generated by go-swagger; DO NOT EDIT.

package virtual_networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

var (
	createvirtualNetworkType = "virtual_network"
	updatevirtualNetworkType = "virtual_networks"
)

// New creates a new virtual networks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for virtual networks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateVirtualNetwork(params *CreateVirtualNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVirtualNetworkCreated, error)

	DestroyVirtualNetwork(params *DestroyVirtualNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DestroyVirtualNetworkNoContent, error)

	GetVirtualNetwork(params *GetVirtualNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVirtualNetworkOK, error)

	GetVirtualNetworks(params *GetVirtualNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVirtualNetworksOK, error)

	UpdateVirtualNetwork(params *UpdateVirtualNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVirtualNetworkOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateVirtualNetwork creates a virtual network

Creates a new Virtual Network.
*/
func (a *Client) CreateVirtualNetwork(params *CreateVirtualNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVirtualNetworkCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVirtualNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create-virtual-network",
		Method:             "POST",
		PathPattern:        "/virtual_networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateVirtualNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVirtualNetworkCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create-virtual-network: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DestroyVirtualNetwork deletes a virtual network

Delete virtual network
*/
func (a *Client) DestroyVirtualNetwork(params *DestroyVirtualNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DestroyVirtualNetworkNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestroyVirtualNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "destroy-virtual-network",
		Method:             "DELETE",
		PathPattern:        "/virtual_networks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DestroyVirtualNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DestroyVirtualNetworkNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for destroy-virtual-network: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVirtualNetwork retrieves a virtual network

Retrieve a Virtual Network.
*/
func (a *Client) GetVirtualNetwork(params *GetVirtualNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVirtualNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVirtualNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-virtual-network",
		Method:             "GET",
		PathPattern:        "/virtual_networks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVirtualNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVirtualNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-virtual-network: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVirtualNetworks lists all virtual networks

Lists virtual networks assigned to a project
*/
func (a *Client) GetVirtualNetworks(params *GetVirtualNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVirtualNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVirtualNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-virtual-networks",
		Method:             "GET",
		PathPattern:        "/virtual_networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVirtualNetworksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVirtualNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-virtual-networks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVirtualNetwork updates a virtual network

Update a Virtual Network.
*/
func (a *Client) UpdateVirtualNetwork(params *UpdateVirtualNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVirtualNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVirtualNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-virtual-network",
		Method:             "PATCH",
		PathPattern:        "/virtual_networks/{virtual_network_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVirtualNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVirtualNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-virtual-network: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
