package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	"github.com/latitudesh/lsh/internal/output/table"
)

// ServerScheduleDeletion server schedule deletion
//
// swagger:model server_schedule_deletion
type ServerScheduleDeletion struct {

	// data
	Data *ServerScheduleDeletionData `json:"data,omitempty"`
}

// Validate validates this server schedule deletion
func (m *ServerScheduleDeletion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerScheduleDeletion) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this server schedule deletion based on the context it is used
func (m *ServerScheduleDeletion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerScheduleDeletion) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {

		if swag.IsZero(m.Data) { // not required
			return nil
		}

		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerScheduleDeletion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerScheduleDeletion) UnmarshalBinary(b []byte) error {
	var res ServerScheduleDeletion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServerScheduleDeletionData server schedule deletion data
//
// swagger:model ServerScheduleDeletionData
type ServerScheduleDeletionData struct {

	// attributes
	Attributes *ServerScheduleDeletionDataAttributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [schedule_deletion]
	Type string `json:"type,omitempty"`
}

// Validate validates this server schedule deletion data
func (m *ServerScheduleDeletionData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerScheduleDeletionData) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

var serverScheduleDeletionDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["schedule_deletion"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverScheduleDeletionDataTypeTypePropEnum = append(serverScheduleDeletionDataTypeTypePropEnum, v)
	}
}

const (

	// ServerScheduleDeletionDataTypeScheduleDeletion captures enum value "schedule_deletion"
	ServerScheduleDeletionDataTypeScheduleDeletion string = "schedule_deletion"
)

// prop value enum
func (m *ServerScheduleDeletionData) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverScheduleDeletionDataTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerScheduleDeletionData) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("data"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this server schedule deletion data based on the context it is used
func (m *ServerScheduleDeletionData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerScheduleDeletionData) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.Attributes != nil {

		if swag.IsZero(m.Attributes) { // not required
			return nil
		}

		if err := m.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerScheduleDeletionData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerScheduleDeletionData) UnmarshalBinary(b []byte) error {
	var res ServerScheduleDeletionData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

func (m *ServerScheduleDeletionData) TableRow() table.Row {
	attr := m.Attributes

	return table.Row{
		"id": table.Cell{
			Label: "ID",
			Value: table.String(m.ID),
		},
		"server_id": table.Cell{
			Label: "Server ID",
			Value: table.String(attr.ServerID),
		},
		"scheduled_at": table.Cell{
			Label: "Scheduled At",
			Value: table.String(attr.ScheduledDeletionAt),
		},
	}
}

// ServerScheduleDeletionDataAttributes server schedule deletion data attributes
//
// swagger:model ServerScheduleDeletionDataAttributes
type ServerScheduleDeletionDataAttributes struct {

	// scheduled deletion at
	ScheduledDeletionAt string `json:"scheduled_deletion_at,omitempty"`

	// server id
	ServerID string `json:"server_id,omitempty"`
}

// Validate validates this server schedule deletion data attributes
func (m *ServerScheduleDeletionDataAttributes) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this server schedule deletion data attributes based on context it is used
func (m *ServerScheduleDeletionDataAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServerScheduleDeletionDataAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerScheduleDeletionDataAttributes) UnmarshalBinary(b []byte) error {
	var res ServerScheduleDeletionDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
