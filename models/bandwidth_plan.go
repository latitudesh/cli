// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	"github.com/latitudesh/lsh/internal/output/table"
)

// BandwidthPlan bandwidth plan
//
// swagger:model bandwidth_plan
type BandwidthPlan struct {

	// attributes
	Attributes *BandwidthPlanAttributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [bandwidth_plan]
	Type string `json:"type,omitempty"`
}

// Validate validates this bandwidth plan
func (m *BandwidthPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BandwidthPlan) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

var bandwidthPlanTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bandwidth_plan"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bandwidthPlanTypeTypePropEnum = append(bandwidthPlanTypeTypePropEnum, v)
	}
}

const (

	// BandwidthPlanTypeBandwidthPlan captures enum value "bandwidth_plan"
	BandwidthPlanTypeBandwidthPlan string = "bandwidth_plan"
)

// prop value enum
func (m *BandwidthPlan) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bandwidthPlanTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BandwidthPlan) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this bandwidth plan based on the context it is used
func (m *BandwidthPlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BandwidthPlan) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.Attributes != nil {

		if swag.IsZero(m.Attributes) { // not required
			return nil
		}

		if err := m.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BandwidthPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BandwidthPlan) UnmarshalBinary(b []byte) error {
	var res BandwidthPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

func (m *BandwidthPlan) TableRow() table.Row {
	attr := m.Attributes

	return table.Row{
		"id": table.Cell{
			Label: "ID",
			Value: table.String(m.ID),
		},
		"region": table.Cell{
			Label: "Region",
			Value: table.String(attr.Region),
		},
		"locations": table.Cell{
			Label: "Locations",
			Value: table.StringList(attr.Locations, ", "),
		},
		"usd_price_hour": table.Cell{
			Label: "USD/Hour",
			Value: table.Int(attr.Pricing.Usd.Hourly),
		},
		"usd_price_month": table.Cell{
			Label: "USD/Month",
			Value: table.Int(attr.Pricing.Usd.Monthly),
		},
		"brl_price_hour": table.Cell{
			Label: "BRL/Hour",
			Value: table.Int(attr.Pricing.Brl.Hourly),
		},
		"brl_price_month": table.Cell{
			Label: "BRL/Month",
			Value: table.Int(attr.Pricing.Brl.Monthly),
		},
	}
}

// BandwidthPlanAttributes bandwidth plan attributes
//
// swagger:model BandwidthPlanAttributes
type BandwidthPlanAttributes struct {

	// locations
	Locations []string `json:"locations"`

	// pricing
	Pricing *BandwidthPlanAttributesPricing `json:"pricing,omitempty"`

	// region
	Region string `json:"region,omitempty"`
}

// Validate validates this bandwidth plan attributes
func (m *BandwidthPlanAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePricing(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BandwidthPlanAttributes) validatePricing(formats strfmt.Registry) error {
	if swag.IsZero(m.Pricing) { // not required
		return nil
	}

	if m.Pricing != nil {
		if err := m.Pricing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "pricing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes" + "." + "pricing")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this bandwidth plan attributes based on the context it is used
func (m *BandwidthPlanAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePricing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BandwidthPlanAttributes) contextValidatePricing(ctx context.Context, formats strfmt.Registry) error {

	if m.Pricing != nil {

		if swag.IsZero(m.Pricing) { // not required
			return nil
		}

		if err := m.Pricing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "pricing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes" + "." + "pricing")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BandwidthPlanAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BandwidthPlanAttributes) UnmarshalBinary(b []byte) error {
	var res BandwidthPlanAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BandwidthPlanAttributesPricing bandwidth plan attributes pricing
//
// swagger:model BandwidthPlanAttributesPricing
type BandwidthPlanAttributesPricing struct {

	// brl
	Brl *BandwidthPlanAttributesPricingBrl `json:"brl,omitempty"`

	// usd
	Usd *BandwidthPlanAttributesPricingUsd `json:"usd,omitempty"`
}

// Validate validates this bandwidth plan attributes pricing
func (m *BandwidthPlanAttributesPricing) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBrl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsd(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BandwidthPlanAttributesPricing) validateBrl(formats strfmt.Registry) error {
	if swag.IsZero(m.Brl) { // not required
		return nil
	}

	if m.Brl != nil {
		if err := m.Brl.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "pricing" + "." + "brl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes" + "." + "pricing" + "." + "brl")
			}
			return err
		}
	}

	return nil
}

func (m *BandwidthPlanAttributesPricing) validateUsd(formats strfmt.Registry) error {
	if swag.IsZero(m.Usd) { // not required
		return nil
	}

	if m.Usd != nil {
		if err := m.Usd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "pricing" + "." + "usd")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes" + "." + "pricing" + "." + "usd")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this bandwidth plan attributes pricing based on the context it is used
func (m *BandwidthPlanAttributesPricing) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBrl(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BandwidthPlanAttributesPricing) contextValidateBrl(ctx context.Context, formats strfmt.Registry) error {

	if m.Brl != nil {

		if swag.IsZero(m.Brl) { // not required
			return nil
		}

		if err := m.Brl.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "pricing" + "." + "brl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes" + "." + "pricing" + "." + "brl")
			}
			return err
		}
	}

	return nil
}

func (m *BandwidthPlanAttributesPricing) contextValidateUsd(ctx context.Context, formats strfmt.Registry) error {

	if m.Usd != nil {

		if swag.IsZero(m.Usd) { // not required
			return nil
		}

		if err := m.Usd.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "pricing" + "." + "usd")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes" + "." + "pricing" + "." + "usd")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BandwidthPlanAttributesPricing) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BandwidthPlanAttributesPricing) UnmarshalBinary(b []byte) error {
	var res BandwidthPlanAttributesPricing
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BandwidthPlanAttributesPricingBrl bandwidth plan attributes pricing brl
//
// swagger:model BandwidthPlanAttributesPricingBrl
type BandwidthPlanAttributesPricingBrl struct {

	// hourly
	Hourly int64 `json:"hourly,omitempty"`

	// monthly
	Monthly int64 `json:"monthly,omitempty"`
}

// Validate validates this bandwidth plan attributes pricing brl
func (m *BandwidthPlanAttributesPricingBrl) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this bandwidth plan attributes pricing brl based on context it is used
func (m *BandwidthPlanAttributesPricingBrl) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BandwidthPlanAttributesPricingBrl) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BandwidthPlanAttributesPricingBrl) UnmarshalBinary(b []byte) error {
	var res BandwidthPlanAttributesPricingBrl
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BandwidthPlanAttributesPricingUsd bandwidth plan attributes pricing usd
//
// swagger:model BandwidthPlanAttributesPricingUsd
type BandwidthPlanAttributesPricingUsd struct {

	// hourly
	Hourly int64 `json:"hourly,omitempty"`

	// monthly
	Monthly int64 `json:"monthly,omitempty"`
}

// Validate validates this bandwidth plan attributes pricing usd
func (m *BandwidthPlanAttributesPricingUsd) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this bandwidth plan attributes pricing usd based on context it is used
func (m *BandwidthPlanAttributesPricingUsd) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BandwidthPlanAttributesPricingUsd) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BandwidthPlanAttributesPricingUsd) UnmarshalBinary(b []byte) error {
	var res BandwidthPlanAttributesPricingUsd
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
