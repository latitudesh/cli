package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	"github.com/latitudesh/lsh/internal/output/table"
)

// VirtualNetwork virtual network
//
// swagger:model virtual_network
type VirtualNetwork struct {

	// attributes
	Attributes *VirtualNetworkAttributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [virtual_networks]
	Type string `json:"type,omitempty"`
}

// Validate validates this virtual network
func (m *VirtualNetwork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualNetwork) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

var virtualNetworkTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["virtual_networks"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualNetworkTypeTypePropEnum = append(virtualNetworkTypeTypePropEnum, v)
	}
}

const (

	// VirtualNetworkTypeVirtualNetworks captures enum value "virtual_networks"
	VirtualNetworkTypeVirtualNetworks string = "virtual_networks"
)

// prop value enum
func (m *VirtualNetwork) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, virtualNetworkTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VirtualNetwork) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this virtual network based on the context it is used
func (m *VirtualNetwork) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualNetwork) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.Attributes != nil {

		if swag.IsZero(m.Attributes) { // not required
			return nil
		}

		if err := m.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualNetwork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualNetwork) UnmarshalBinary(b []byte) error {
	var res VirtualNetwork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

func (m *VirtualNetwork) TableRow() table.Row {
	attr := m.Attributes

	return table.Row{
		"id": table.Cell{
			Label: "ID",
			Value: table.String(m.ID),
		},
		"tags": table.Cell{
			Label: "Tags",
			Value: table.StringList(tags(attr.Tags), ","),
		},
		"vid": table.Cell{
			Label: "VID",
			Value: table.Int(attr.Vid),
		},
		"description": table.Cell{
			Label: "Description",
			Value: table.String(attr.Description),
		},
		"assignments": table.Cell{
			Label: "Assignments",
			Value: table.Int(attr.AssignmentsCount),
		},
		"location": table.Cell{
			Label: "Location",
			Value: table.String(virtualNetworkLocation(attr)),
		},
	}
}

func virtualNetworkLocation(attributes *VirtualNetworkAttributes) string {
	region := attributes.Region

	if region != nil && region.Site != nil {
		return region.Site.Slug
	}

	return ""
}

// VirtualNetworkAttributes virtual network attributes
//
// swagger:model VirtualNetworkAttributes
type VirtualNetworkAttributes struct {
	Tags []*TagsIncude `json:"tags,omitempty"`

	// Amount of devices assigned to the virtual network
	AssignmentsCount int64 `json:"assignments_count,omitempty"`

	// Description of the virtual network
	Description string `json:"description,omitempty"`

	// Name of the virtual network
	Name string `json:"name,omitempty"`

	// region
	Region *VirtualNetworkAttributesRegion `json:"region,omitempty"`

	// vlan ID of the virtual network
	Vid int64 `json:"vid,omitempty"`
}

// Validate validates this virtual network attributes
func (m *VirtualNetworkAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualNetworkAttributes) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes" + "." + "region")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this virtual network attributes based on the context it is used
func (m *VirtualNetworkAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualNetworkAttributes) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if m.Region != nil {

		if swag.IsZero(m.Region) { // not required
			return nil
		}

		if err := m.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes" + "." + "region")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualNetworkAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualNetworkAttributes) UnmarshalBinary(b []byte) error {
	var res VirtualNetworkAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VirtualNetworkAttributesRegion virtual network attributes region
//
// swagger:model VirtualNetworkAttributesRegion
type VirtualNetworkAttributesRegion struct {

	// city
	City string `json:"city,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// site
	Site *VirtualNetworkAttributesRegionSite `json:"site,omitempty"`
}

// Validate validates this virtual network attributes region
func (m *VirtualNetworkAttributesRegion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualNetworkAttributesRegion) validateSite(formats strfmt.Registry) error {
	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "region" + "." + "site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes" + "." + "region" + "." + "site")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this virtual network attributes region based on the context it is used
func (m *VirtualNetworkAttributesRegion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualNetworkAttributesRegion) contextValidateSite(ctx context.Context, formats strfmt.Registry) error {

	if m.Site != nil {

		if swag.IsZero(m.Site) { // not required
			return nil
		}

		if err := m.Site.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "region" + "." + "site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes" + "." + "region" + "." + "site")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualNetworkAttributesRegion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualNetworkAttributesRegion) UnmarshalBinary(b []byte) error {
	var res VirtualNetworkAttributesRegion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VirtualNetworkAttributesRegionSite virtual network attributes region site
//
// swagger:model VirtualNetworkAttributesRegionSite
type VirtualNetworkAttributesRegionSite struct {

	// facility
	Facility string `json:"facility,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// slug
	Slug string `json:"slug,omitempty"`
}

// Validate validates this virtual network attributes region site
func (m *VirtualNetworkAttributesRegionSite) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this virtual network attributes region site based on context it is used
func (m *VirtualNetworkAttributesRegionSite) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VirtualNetworkAttributesRegionSite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualNetworkAttributesRegionSite) UnmarshalBinary(b []byte) error {
	var res VirtualNetworkAttributesRegionSite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
