// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/latitudesh/cli/client/bandwidth_packages"
	"github.com/latitudesh/cli/internal/utils"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationBandwidthPackagesUpdatePlansBandwidthCmd returns a cmd to handle operation updatePlansBandwidth
func makeOperationBandwidthPackagesUpdatePlansBandwidthCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "update-plans-bandwidth",
		Short: `Allow to increase or decrease bandwidth packages. Only admins and owners can request.
`,
		RunE: runOperationBandwidthPackagesUpdatePlansBandwidth,
	}

	if err := registerOperationBandwidthPackagesUpdatePlansBandwidthParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationBandwidthPackagesUpdatePlansBandwidth uses cmd flags to call endpoint api
func runOperationBandwidthPackagesUpdatePlansBandwidth(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := bandwidth_packages.NewUpdatePlansBandwidthParams()
	params.SetDefaults()
	if err, _ := retrieveOperationBandwidthPackagesUpdatePlansBandwidthAPIVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBandwidthPackagesUpdatePlansBandwidthBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationBandwidthPackagesUpdatePlansBandwidthResult(appCli.BandwidthPackages.UpdatePlansBandwidth(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(utils.PrettifyJson(msgStr))
	}
	return nil
}

// registerOperationBandwidthPackagesUpdatePlansBandwidthParamFlags registers all flags needed to fill params
func registerOperationBandwidthPackagesUpdatePlansBandwidthParamFlags(cmd *cobra.Command) error {
	if err := registerOperationBandwidthPackagesUpdatePlansBandwidthAPIVersionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBandwidthPackagesUpdatePlansBandwidthBodyParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationBandwidthPackagesUpdatePlansBandwidthAPIVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	apiVersionDescription := ``

	var apiVersionFlagName string
	if cmdPrefix == "" {
		apiVersionFlagName = "API-Version"
	} else {
		apiVersionFlagName = fmt.Sprintf("%v.API-Version", cmdPrefix)
	}

	var apiVersionFlagDefault string = "2023-06-01"

	_ = cmd.PersistentFlags().String(apiVersionFlagName, apiVersionFlagDefault, apiVersionDescription)

	return nil
}
func registerOperationBandwidthPackagesUpdatePlansBandwidthBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFlagName, "", "Optional json string for [body]. ")

	// add flags for body
	if err := registerModelUpdatePlansBandwidthBodyFlags(0, "updatePlansBandwidthBody", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationBandwidthPackagesUpdatePlansBandwidthAPIVersionFlag(m *bandwidth_packages.UpdatePlansBandwidthParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("API-Version") {

		var apiVersionFlagName string
		if cmdPrefix == "" {
			apiVersionFlagName = "API-Version"
		} else {
			apiVersionFlagName = fmt.Sprintf("%v.API-Version", cmdPrefix)
		}

		apiVersionFlagValue, err := cmd.Flags().GetString(apiVersionFlagName)
		if err != nil {
			return err, false
		}
		m.APIVersion = &apiVersionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBandwidthPackagesUpdatePlansBandwidthBodyFlag(m *bandwidth_packages.UpdatePlansBandwidthParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := bandwidth_packages.UpdatePlansBandwidthBody{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in UpdatePlansBandwidthBody: %v", err), false
		}
		m.Body = bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = bandwidth_packages.UpdatePlansBandwidthBody{}
	}
	err, added := retrieveModelUpdatePlansBandwidthBodyFlags(0, &bodyValueModel, "updatePlansBandwidthBody", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	if dryRun && debug {

		bodyValueDebugBytes, err := json.Marshal(m.Body)
		if err != nil {
			return err, false
		}
		logDebugf("Body dry-run payload: %v", string(bodyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationBandwidthPackagesUpdatePlansBandwidthResult parses request result and return the string content
func parseOperationBandwidthPackagesUpdatePlansBandwidthResult(resp0 *bandwidth_packages.UpdatePlansBandwidthOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*bandwidth_packages.UpdatePlansBandwidthOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*bandwidth_packages.UpdatePlansBandwidthForbidden)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelUpdatePlansBandwidthBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUpdatePlansBandwidthBodyData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUpdatePlansBandwidthBodyData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dataFlagName string
	if cmdPrefix == "" {
		dataFlagName = "data"
	} else {
		dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
	}

	if err := registerModelUpdatePlansBandwidthParamsBodyDataFlags(depth+1, dataFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUpdatePlansBandwidthBodyFlags(depth int, m *bandwidth_packages.UpdatePlansBandwidthBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dataAdded := retrieveUpdatePlansBandwidthBodyDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded

	return nil, retAdded
}

func retrieveUpdatePlansBandwidthBodyDataFlags(depth int, m *bandwidth_packages.UpdatePlansBandwidthBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataFlagName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(dataFlagName) {
		// info: complex object data UpdatePlansBandwidthParamsBodyData is retrieved outside this Changed() block
	}
	dataFlagValue := m.Data
	if swag.IsZero(dataFlagValue) {
		dataFlagValue = &bandwidth_packages.UpdatePlansBandwidthParamsBodyData{}
	}

	err, dataAdded := retrieveModelUpdatePlansBandwidthParamsBodyDataFlags(depth+1, dataFlagValue, dataFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded
	if dataAdded {
		m.Data = dataFlagValue
	}

	return nil, retAdded
}

// register flags to command
func registerModelUpdatePlansBandwidthParamsBodyDataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUpdatePlansBandwidthParamsBodyDataAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpdatePlansBandwidthParamsBodyDataType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUpdatePlansBandwidthParamsBodyDataAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var attributesFlagName string
	if cmdPrefix == "" {
		attributesFlagName = "attributes"
	} else {
		attributesFlagName = fmt.Sprintf("%v.attributes", cmdPrefix)
	}

	if err := registerModelUpdatePlansBandwidthParamsBodyDataAttributesFlags(depth+1, attributesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerUpdatePlansBandwidthParamsBodyDataType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["bandwidth_packages"]. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["bandwidth_packages"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUpdatePlansBandwidthParamsBodyDataFlags(depth int, m *bandwidth_packages.UpdatePlansBandwidthParamsBodyData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributesAdded := retrieveUpdatePlansBandwidthParamsBodyDataAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	err, typeAdded := retrieveUpdatePlansBandwidthParamsBodyDataTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveUpdatePlansBandwidthParamsBodyDataAttributesFlags(depth int, m *bandwidth_packages.UpdatePlansBandwidthParamsBodyData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%v.attributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// info: complex object attributes UpdatePlansBandwidthParamsBodyDataAttributes is retrieved outside this Changed() block
	}
	attributesFlagValue := m.Attributes
	if swag.IsZero(attributesFlagValue) {
		attributesFlagValue = &bandwidth_packages.UpdatePlansBandwidthParamsBodyDataAttributes{}
	}

	err, attributesAdded := retrieveModelUpdatePlansBandwidthParamsBodyDataAttributesFlags(depth+1, attributesFlagValue, attributesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded
	if attributesAdded {
		m.Attributes = attributesFlagValue
	}

	return nil, retAdded
}

func retrieveUpdatePlansBandwidthParamsBodyDataTypeFlags(depth int, m *bandwidth_packages.UpdatePlansBandwidthParamsBodyData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// register flags to command
func registerModelUpdatePlansBandwidthParamsBodyDataAttributesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUpdatePlansBandwidthParamsBodyDataAttributesProject(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpdatePlansBandwidthParamsBodyDataAttributesQuantity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpdatePlansBandwidthParamsBodyDataAttributesRegionSlug(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUpdatePlansBandwidthParamsBodyDataAttributesProject(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	projectDescription := `The project (ID or Slug) to add bandwidth`

	var projectFlagName string
	if cmdPrefix == "" {
		projectFlagName = "project"
	} else {
		projectFlagName = fmt.Sprintf("%v.project", cmdPrefix)
	}

	var projectFlagDefault string

	_ = cmd.PersistentFlags().String(projectFlagName, projectFlagDefault, projectDescription)

	return nil
}

func registerUpdatePlansBandwidthParamsBodyDataAttributesQuantity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	quantityDescription := `The total amount you want to have`

	var quantityFlagName string
	if cmdPrefix == "" {
		quantityFlagName = "quantity"
	} else {
		quantityFlagName = fmt.Sprintf("%v.quantity", cmdPrefix)
	}

	var quantityFlagDefault int64

	_ = cmd.PersistentFlags().Int64(quantityFlagName, quantityFlagDefault, quantityDescription)

	return nil
}

func registerUpdatePlansBandwidthParamsBodyDataAttributesRegionSlug(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	regionSlugDescription := `The region to add bandwidth`

	var regionSlugFlagName string
	if cmdPrefix == "" {
		regionSlugFlagName = "region_slug"
	} else {
		regionSlugFlagName = fmt.Sprintf("%v.region_slug", cmdPrefix)
	}

	var regionSlugFlagDefault string

	_ = cmd.PersistentFlags().String(regionSlugFlagName, regionSlugFlagDefault, regionSlugDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUpdatePlansBandwidthParamsBodyDataAttributesFlags(depth int, m *bandwidth_packages.UpdatePlansBandwidthParamsBodyDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, projectAdded := retrieveUpdatePlansBandwidthParamsBodyDataAttributesProjectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectAdded

	err, quantityAdded := retrieveUpdatePlansBandwidthParamsBodyDataAttributesQuantityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || quantityAdded

	err, regionSlugAdded := retrieveUpdatePlansBandwidthParamsBodyDataAttributesRegionSlugFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || regionSlugAdded

	return nil, retAdded
}

func retrieveUpdatePlansBandwidthParamsBodyDataAttributesProjectFlags(depth int, m *bandwidth_packages.UpdatePlansBandwidthParamsBodyDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectFlagName := fmt.Sprintf("%v.project", cmdPrefix)
	if cmd.Flags().Changed(projectFlagName) {

		var projectFlagName string
		if cmdPrefix == "" {
			projectFlagName = "project"
		} else {
			projectFlagName = fmt.Sprintf("%v.project", cmdPrefix)
		}

		projectFlagValue, err := cmd.Flags().GetString(projectFlagName)
		if err != nil {
			return err, false
		}
		m.Project = projectFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUpdatePlansBandwidthParamsBodyDataAttributesQuantityFlags(depth int, m *bandwidth_packages.UpdatePlansBandwidthParamsBodyDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	quantityFlagName := fmt.Sprintf("%v.quantity", cmdPrefix)
	if cmd.Flags().Changed(quantityFlagName) {

		var quantityFlagName string
		if cmdPrefix == "" {
			quantityFlagName = "quantity"
		} else {
			quantityFlagName = fmt.Sprintf("%v.quantity", cmdPrefix)
		}

		quantityFlagValue, err := cmd.Flags().GetInt64(quantityFlagName)
		if err != nil {
			return err, false
		}
		m.Quantity = quantityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUpdatePlansBandwidthParamsBodyDataAttributesRegionSlugFlags(depth int, m *bandwidth_packages.UpdatePlansBandwidthParamsBodyDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	regionSlugFlagName := fmt.Sprintf("%v.region_slug", cmdPrefix)
	if cmd.Flags().Changed(regionSlugFlagName) {

		var regionSlugFlagName string
		if cmdPrefix == "" {
			regionSlugFlagName = "region_slug"
		} else {
			regionSlugFlagName = fmt.Sprintf("%v.region_slug", cmdPrefix)
		}

		regionSlugFlagValue, err := cmd.Flags().GetString(regionSlugFlagName)
		if err != nil {
			return err, false
		}
		m.RegionSlug = regionSlugFlagValue

		retAdded = true
	}

	return nil, retAdded
}
