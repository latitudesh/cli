package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/latitudesh/lsh/client/virtual_network_assignments"
	"github.com/latitudesh/lsh/internal/utils"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationVirtualNetworkAssignmentsAssignServerVirtualNetworkCmd returns a cmd to handle operation assignServerVirtualNetwork
func makeOperationVirtualNetworkAssignmentsAssignServerVirtualNetworkCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "create",
		Short: `Assign a server to a virtual network.`,
		RunE:  runOperationVirtualNetworkAssignmentsAssignServerVirtualNetwork,
	}

	if err := registerOperationVirtualNetworkAssignmentsAssignServerVirtualNetworkParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationVirtualNetworkAssignmentsAssignServerVirtualNetwork uses cmd flags to call endpoint api
func runOperationVirtualNetworkAssignmentsAssignServerVirtualNetwork(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := virtual_network_assignments.NewAssignServerVirtualNetworkParams()
	if err, _ := retrieveOperationVirtualNetworkAssignmentsAssignServerVirtualNetworkBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}

	response, err := appCli.VirtualNetworkAssignments.AssignServerVirtualNetwork(params, nil)
	if err != nil {
		utils.PrintError(err)
		return nil
	}

	if !debug {
		utils.Render(response.GetData())
	}

	return nil
}

// registerOperationVirtualNetworkAssignmentsAssignServerVirtualNetworkParamFlags registers all flags needed to fill params
func registerOperationVirtualNetworkAssignmentsAssignServerVirtualNetworkParamFlags(cmd *cobra.Command) error {
	if err := registerOperationVirtualNetworkAssignmentsAssignServerVirtualNetworkBodyParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationVirtualNetworkAssignmentsAssignServerVirtualNetworkBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFlagName, "", "Optional json string for [body]. ")

	// add flags for body
	if err := registerModelAssignServerVirtualNetworkBodyFlags(0, "", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationVirtualNetworkAssignmentsAssignServerVirtualNetworkBodyFlag(m *virtual_network_assignments.AssignServerVirtualNetworkParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := virtual_network_assignments.AssignServerVirtualNetworkBody{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in AssignServerVirtualNetworkBody: %v", err), false
		}
		m.Body = bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = virtual_network_assignments.AssignServerVirtualNetworkBody{}
	}
	err, added := retrieveModelAssignServerVirtualNetworkBodyFlags(0, &bodyValueModel, "", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	if dryRun && debug {

		bodyValueDebugBytes, err := json.Marshal(m.Body)
		if err != nil {
			return err, false
		}
		logDebugf("Body dry-run payload: %v", string(bodyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// register flags to command
func registerModelAssignServerVirtualNetworkBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAssignServerVirtualNetworkBodyData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAssignServerVirtualNetworkBodyData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dataFlagName = ""

	if err := registerModelAssignServerVirtualNetworkParamsBodyDataFlags(depth+1, dataFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAssignServerVirtualNetworkBodyFlags(depth int, m *virtual_network_assignments.AssignServerVirtualNetworkBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dataAdded := retrieveAssignServerVirtualNetworkBodyDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded

	return nil, retAdded
}

func retrieveAssignServerVirtualNetworkBodyDataFlags(depth int, m *virtual_network_assignments.AssignServerVirtualNetworkBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataFlagName := fmt.Sprintf("%vdata", cmdPrefix)
	if cmd.Flags().Changed(dataFlagName) {
		// info: complex object data AssignServerVirtualNetworkParamsBodyData is retrieved outside this Changed() block
	}
	dataFlagValue := m.Data
	if swag.IsZero(dataFlagValue) {
		dataFlagValue = &virtual_network_assignments.AssignServerVirtualNetworkParamsBodyData{}
	}

	dataFlagName = ""
	err, dataAdded := retrieveModelAssignServerVirtualNetworkParamsBodyDataFlags(depth+1, dataFlagValue, dataFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded
	if dataAdded {
		m.Data = dataFlagValue
	}

	return nil, retAdded
}

// register flags to command
func registerModelAssignServerVirtualNetworkParamsBodyDataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAssignServerVirtualNetworkParamsBodyDataAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAssignServerVirtualNetworkParamsBodyDataAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var attributesFlagName = ""

	if err := registerModelAssignServerVirtualNetworkParamsBodyDataAttributesFlags(depth+1, attributesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAssignServerVirtualNetworkParamsBodyDataFlags(depth int, m *virtual_network_assignments.AssignServerVirtualNetworkParamsBodyData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributesAdded := retrieveAssignServerVirtualNetworkParamsBodyDataAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	return nil, retAdded
}

func retrieveAssignServerVirtualNetworkParamsBodyDataAttributesFlags(depth int, m *virtual_network_assignments.AssignServerVirtualNetworkParamsBodyData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%vattributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// info: complex object attributes AssignServerVirtualNetworkParamsBodyDataAttributes is retrieved outside this Changed() block
	}
	attributesFlagValue := m.Attributes
	if swag.IsZero(attributesFlagValue) {
		attributesFlagValue = &virtual_network_assignments.AssignServerVirtualNetworkParamsBodyDataAttributes{}
	}

	attributesFlagName = ""
	err, attributesAdded := retrieveModelAssignServerVirtualNetworkParamsBodyDataAttributesFlags(depth+1, attributesFlagValue, attributesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded
	if attributesAdded {
		m.Attributes = attributesFlagValue
	}

	return nil, retAdded
}

// register flags to command
func registerModelAssignServerVirtualNetworkParamsBodyDataAttributesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAssignServerVirtualNetworkParamsBodyDataAttributesServerID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAssignServerVirtualNetworkParamsBodyDataAttributesVirtualNetworkID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAssignServerVirtualNetworkParamsBodyDataAttributesServerID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverIdDescription := `The Server Id (Required).`

	var serverIdFlagName = "server"

	var serverIdFlagDefault string

	_ = cmd.PersistentFlags().String(serverIdFlagName, serverIdFlagDefault, serverIdDescription)
	cmd.MarkPersistentFlagRequired(serverIdFlagName)

	return nil
}

func registerAssignServerVirtualNetworkParamsBodyDataAttributesVirtualNetworkID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	virtualNetworkIdDescription := `The Virtual Network Id (Required).`

	var virtualNetworkIdFlagName = "virtual_network"

	var virtualNetworkIdFlagDefault string

	_ = cmd.PersistentFlags().String(virtualNetworkIdFlagName, virtualNetworkIdFlagDefault, virtualNetworkIdDescription)
	cmd.MarkPersistentFlagRequired(virtualNetworkIdFlagName)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAssignServerVirtualNetworkParamsBodyDataAttributesFlags(depth int, m *virtual_network_assignments.AssignServerVirtualNetworkParamsBodyDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, serverIdAdded := retrieveAssignServerVirtualNetworkParamsBodyDataAttributesServerIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverIdAdded

	err, virtualNetworkIdAdded := retrieveAssignServerVirtualNetworkParamsBodyDataAttributesVirtualNetworkIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || virtualNetworkIdAdded

	return nil, retAdded
}

func retrieveAssignServerVirtualNetworkParamsBodyDataAttributesServerIDFlags(depth int, m *virtual_network_assignments.AssignServerVirtualNetworkParamsBodyDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	var serverIdFlagName = "server"
	if cmd.Flags().Changed(serverIdFlagName) {

		serverIdFlagValue, err := cmd.Flags().GetString(serverIdFlagName)
		if err != nil {
			return err, false
		}
		m.ServerID = serverIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAssignServerVirtualNetworkParamsBodyDataAttributesVirtualNetworkIDFlags(depth int, m *virtual_network_assignments.AssignServerVirtualNetworkParamsBodyDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	var virtualNetworkIdFlagName = "virtual_network"
	if cmd.Flags().Changed(virtualNetworkIdFlagName) {

		virtualNetworkIdFlagValue, err := cmd.Flags().GetString(virtualNetworkIdFlagName)
		if err != nil {
			return err, false
		}
		m.VirtualNetworkID = virtualNetworkIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
