// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/latitudesh/cli/client/billing_usage"
	"github.com/latitudesh/cli/internal/utils"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationBillingUsageGetBillingUsageCmd returns a cmd to handle operation getBillingUsage
func makeOperationBillingUsageGetBillingUsageCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "get-billing-usage",
		Short: `Returns the billing usage of a project
`,
		RunE: runOperationBillingUsageGetBillingUsage,
	}

	if err := registerOperationBillingUsageGetBillingUsageParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationBillingUsageGetBillingUsage uses cmd flags to call endpoint api
func runOperationBillingUsageGetBillingUsage(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := billing_usage.NewGetBillingUsageParams()
	params.SetDefaults()
	if err, _ := retrieveOperationBillingUsageGetBillingUsageAPIVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBillingUsageGetBillingUsageFilterPlanFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBillingUsageGetBillingUsageFilterProductsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBillingUsageGetBillingUsageFilterProjectFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationBillingUsageGetBillingUsageResult(appCli.BillingUsage.GetBillingUsage(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(utils.PrettifyJson(msgStr))
	}
	return nil
}

// registerOperationBillingUsageGetBillingUsageParamFlags registers all flags needed to fill params
func registerOperationBillingUsageGetBillingUsageParamFlags(cmd *cobra.Command) error {
	if err := registerOperationBillingUsageGetBillingUsageAPIVersionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBillingUsageGetBillingUsageFilterPlanParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBillingUsageGetBillingUsageFilterProductsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBillingUsageGetBillingUsageFilterProjectParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationBillingUsageGetBillingUsageAPIVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	apiVersionDescription := ``

	var apiVersionFlagName string
	if cmdPrefix == "" {
		apiVersionFlagName = "API-Version"
	} else {
		apiVersionFlagName = fmt.Sprintf("%v.API-Version", cmdPrefix)
	}

	var apiVersionFlagDefault string = "2023-06-01"

	_ = cmd.PersistentFlags().String(apiVersionFlagName, apiVersionFlagDefault, apiVersionDescription)

	return nil
}
func registerOperationBillingUsageGetBillingUsageFilterPlanParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	filterPlanDescription := `Accepts a plan name and allows to filter the usage for that plan.
`

	var filterPlanFlagName string
	if cmdPrefix == "" {
		filterPlanFlagName = "filter[plan]"
	} else {
		filterPlanFlagName = fmt.Sprintf("%v.filter[plan]", cmdPrefix)
	}

	var filterPlanFlagDefault string

	_ = cmd.PersistentFlags().String(filterPlanFlagName, filterPlanFlagDefault, filterPlanDescription)

	return nil
}
func registerOperationBillingUsageGetBillingUsageFilterProductsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	filterProductsDescription := `Allows to filter the billing usage for specific products. It accepts an array of product ids.
`

	var filterProductsFlagName string
	if cmdPrefix == "" {
		filterProductsFlagName = "filter[products][]"
	} else {
		filterProductsFlagName = fmt.Sprintf("%v.filter[products][]", cmdPrefix)
	}

	var filterProductsFlagDefault []string

	_ = cmd.PersistentFlags().StringSlice(filterProductsFlagName, filterProductsFlagDefault, filterProductsDescription)

	return nil
}
func registerOperationBillingUsageGetBillingUsageFilterProjectParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	filterProjectDescription := `Required. `

	var filterProjectFlagName string
	if cmdPrefix == "" {
		filterProjectFlagName = "filter[project]"
	} else {
		filterProjectFlagName = fmt.Sprintf("%v.filter[project]", cmdPrefix)
	}

	var filterProjectFlagDefault string

	_ = cmd.PersistentFlags().String(filterProjectFlagName, filterProjectFlagDefault, filterProjectDescription)

	return nil
}

func retrieveOperationBillingUsageGetBillingUsageAPIVersionFlag(m *billing_usage.GetBillingUsageParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("API-Version") {

		var apiVersionFlagName string
		if cmdPrefix == "" {
			apiVersionFlagName = "API-Version"
		} else {
			apiVersionFlagName = fmt.Sprintf("%v.API-Version", cmdPrefix)
		}

		apiVersionFlagValue, err := cmd.Flags().GetString(apiVersionFlagName)
		if err != nil {
			return err, false
		}
		m.APIVersion = &apiVersionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBillingUsageGetBillingUsageFilterPlanFlag(m *billing_usage.GetBillingUsageParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("filter[plan]") {

		var filterPlanFlagName string
		if cmdPrefix == "" {
			filterPlanFlagName = "filter[plan]"
		} else {
			filterPlanFlagName = fmt.Sprintf("%v.filter[plan]", cmdPrefix)
		}

		filterPlanFlagValue, err := cmd.Flags().GetString(filterPlanFlagName)
		if err != nil {
			return err, false
		}
		m.FilterPlan = &filterPlanFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBillingUsageGetBillingUsageFilterProductsFlag(m *billing_usage.GetBillingUsageParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("filter[products][]") {

		var filterProductsFlagName string
		if cmdPrefix == "" {
			filterProductsFlagName = "filter[products][]"
		} else {
			filterProductsFlagName = fmt.Sprintf("%v.filter[products][]", cmdPrefix)
		}

		filterProductsFlagValues, err := cmd.Flags().GetStringSlice(filterProductsFlagName)
		if err != nil {
			return err, false
		}
		m.FilterProducts = filterProductsFlagValues

	}
	return nil, retAdded
}
func retrieveOperationBillingUsageGetBillingUsageFilterProjectFlag(m *billing_usage.GetBillingUsageParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("filter[project]") {

		var filterProjectFlagName string
		if cmdPrefix == "" {
			filterProjectFlagName = "filter[project]"
		} else {
			filterProjectFlagName = fmt.Sprintf("%v.filter[project]", cmdPrefix)
		}

		filterProjectFlagValue, err := cmd.Flags().GetString(filterProjectFlagName)
		if err != nil {
			return err, false
		}
		m.FilterProject = filterProjectFlagValue

	}
	return nil, retAdded
}

// parseOperationBillingUsageGetBillingUsageResult parses request result and return the string content
func parseOperationBillingUsageGetBillingUsageResult(resp0 *billing_usage.GetBillingUsageOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*billing_usage.GetBillingUsageOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
