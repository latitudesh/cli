// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/latitudesh/cli/client/user_data"
	"github.com/latitudesh/cli/internal/utils"

	"github.com/spf13/cobra"
)

// makeOperationUserDataDeleteProjectUserDataCmd returns a cmd to handle operation deleteProjectUserData
func makeOperationUserDataDeleteProjectUserDataCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "delete-project-user-data",
		Short: `Allow you remove User Data in a project.
`,
		RunE: runOperationUserDataDeleteProjectUserData,
	}

	if err := registerOperationUserDataDeleteProjectUserDataParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationUserDataDeleteProjectUserData uses cmd flags to call endpoint api
func runOperationUserDataDeleteProjectUserData(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := user_data.NewDeleteProjectUserDataParams()
	params.SetDefaults()
	if err, _ := retrieveOperationUserDataDeleteProjectUserDataAPIVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUserDataDeleteProjectUserDataProjectIDOrSlugFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUserDataDeleteProjectUserDataUserDataIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationUserDataDeleteProjectUserDataResult(appCli.UserData.DeleteProjectUserData(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(utils.PrettifyJson(msgStr))
	}
	return nil
}

// registerOperationUserDataDeleteProjectUserDataParamFlags registers all flags needed to fill params
func registerOperationUserDataDeleteProjectUserDataParamFlags(cmd *cobra.Command) error {
	if err := registerOperationUserDataDeleteProjectUserDataAPIVersionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUserDataDeleteProjectUserDataProjectIDOrSlugParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUserDataDeleteProjectUserDataUserDataIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationUserDataDeleteProjectUserDataAPIVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	apiVersionDescription := ``

	var apiVersionFlagName string
	if cmdPrefix == "" {
		apiVersionFlagName = "API-Version"
	} else {
		apiVersionFlagName = fmt.Sprintf("%v.API-Version", cmdPrefix)
	}

	var apiVersionFlagDefault string = "2023-06-01"

	_ = cmd.PersistentFlags().String(apiVersionFlagName, apiVersionFlagDefault, apiVersionDescription)

	return nil
}
func registerOperationUserDataDeleteProjectUserDataProjectIDOrSlugParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	projectIdOrSlugDescription := `Required. `

	var projectIdOrSlugFlagName string
	if cmdPrefix == "" {
		projectIdOrSlugFlagName = "project_id_or_slug"
	} else {
		projectIdOrSlugFlagName = fmt.Sprintf("%v.project_id_or_slug", cmdPrefix)
	}

	var projectIdOrSlugFlagDefault string

	_ = cmd.PersistentFlags().String(projectIdOrSlugFlagName, projectIdOrSlugFlagDefault, projectIdOrSlugDescription)

	return nil
}
func registerOperationUserDataDeleteProjectUserDataUserDataIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	userDataIdDescription := `Required. `

	var userDataIdFlagName string
	if cmdPrefix == "" {
		userDataIdFlagName = "user_data_id"
	} else {
		userDataIdFlagName = fmt.Sprintf("%v.user_data_id", cmdPrefix)
	}

	var userDataIdFlagDefault string

	_ = cmd.PersistentFlags().String(userDataIdFlagName, userDataIdFlagDefault, userDataIdDescription)

	return nil
}

func retrieveOperationUserDataDeleteProjectUserDataAPIVersionFlag(m *user_data.DeleteProjectUserDataParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("API-Version") {

		var apiVersionFlagName string
		if cmdPrefix == "" {
			apiVersionFlagName = "API-Version"
		} else {
			apiVersionFlagName = fmt.Sprintf("%v.API-Version", cmdPrefix)
		}

		apiVersionFlagValue, err := cmd.Flags().GetString(apiVersionFlagName)
		if err != nil {
			return err, false
		}
		m.APIVersion = &apiVersionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUserDataDeleteProjectUserDataProjectIDOrSlugFlag(m *user_data.DeleteProjectUserDataParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("project_id_or_slug") {

		var projectIdOrSlugFlagName string
		if cmdPrefix == "" {
			projectIdOrSlugFlagName = "project_id_or_slug"
		} else {
			projectIdOrSlugFlagName = fmt.Sprintf("%v.project_id_or_slug", cmdPrefix)
		}

		projectIdOrSlugFlagValue, err := cmd.Flags().GetString(projectIdOrSlugFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectIDOrSlug = projectIdOrSlugFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUserDataDeleteProjectUserDataUserDataIDFlag(m *user_data.DeleteProjectUserDataParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("user_data_id") {

		var userDataIdFlagName string
		if cmdPrefix == "" {
			userDataIdFlagName = "user_data_id"
		} else {
			userDataIdFlagName = fmt.Sprintf("%v.user_data_id", cmdPrefix)
		}

		userDataIdFlagValue, err := cmd.Flags().GetString(userDataIdFlagName)
		if err != nil {
			return err, false
		}
		m.UserDataID = userDataIdFlagValue

	}
	return nil, retAdded
}

// parseOperationUserDataDeleteProjectUserDataResult parses request result and return the string content
func parseOperationUserDataDeleteProjectUserDataResult(resp0 *user_data.DeleteProjectUserDataNoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning deleteProjectUserDataNoContent is not supported

		// Non schema case: warning deleteProjectUserDataNotFound is not supported

		return "", respErr
	}

	// warning: non schema response deleteProjectUserDataNoContent is not supported by go-swagger cli yet.

	return "", nil
}
