// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/latitudesh/cli/client/ip_addresses"
	"github.com/latitudesh/cli/internal/utils"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationIPAddressesGetIPCmd returns a cmd to handle operation getIp
func makeOperationIPAddressesGetIPCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "get-ip",
		Short: `Retrieve an IP Address`,
		RunE:  runOperationIPAddressesGetIP,
	}

	if err := registerOperationIPAddressesGetIPParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationIPAddressesGetIP uses cmd flags to call endpoint api
func runOperationIPAddressesGetIP(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := ip_addresses.NewGetIPParams()
	params.SetDefaults()
	if err, _ := retrieveOperationIPAddressesGetIPAPIVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationIPAddressesGetIPExtraFieldsIPAddressesFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationIPAddressesGetIPIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationIPAddressesGetIPResult(appCli.IPAddresses.GetIP(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(utils.PrettifyJson(msgStr))
	}
	return nil
}

// registerOperationIPAddressesGetIPParamFlags registers all flags needed to fill params
func registerOperationIPAddressesGetIPParamFlags(cmd *cobra.Command) error {
	if err := registerOperationIPAddressesGetIPAPIVersionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationIPAddressesGetIPExtraFieldsIPAddressesParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationIPAddressesGetIPIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationIPAddressesGetIPAPIVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	apiVersionDescription := ``

	var apiVersionFlagName string
	if cmdPrefix == "" {
		apiVersionFlagName = "API-Version"
	} else {
		apiVersionFlagName = fmt.Sprintf("%v.API-Version", cmdPrefix)
	}

	var apiVersionFlagDefault string = "2023-06-01"

	_ = cmd.PersistentFlags().String(apiVersionFlagName, apiVersionFlagDefault, apiVersionDescription)

	return nil
}

func registerOperationIPAddressesGetIPExtraFieldsIPAddressesParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	extraFieldsIpAddressesDescription := `The ` + "`" + `region` + "`" + ` and ` + "`" + `server` + "`" + ` are provided as extra attributes that is lazy loaded. To request it, just set ` + "`" + `extra_fields[ip_addresses]=region,server` + "`" + ` in the query string.`

	var extraFieldsIpAddressesFlagName string
	if cmdPrefix == "" {
		extraFieldsIpAddressesFlagName = "extra_fields[ip_addresses]"
	} else {
		extraFieldsIpAddressesFlagName = fmt.Sprintf("%v.extra_fields[ip_addresses]", cmdPrefix)
	}

	var extraFieldsIpAddressesFlagDefault string

	_ = cmd.PersistentFlags().String(extraFieldsIpAddressesFlagName, extraFieldsIpAddressesFlagDefault, extraFieldsIpAddressesDescription)

	return nil
}
func registerOperationIPAddressesGetIPIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. The IP Address ID`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func retrieveOperationIPAddressesGetIPAPIVersionFlag(m *ip_addresses.GetIPParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("API-Version") {

		var apiVersionFlagName string
		if cmdPrefix == "" {
			apiVersionFlagName = "API-Version"
		} else {
			apiVersionFlagName = fmt.Sprintf("%v.API-Version", cmdPrefix)
		}

		apiVersionFlagValue, err := cmd.Flags().GetString(apiVersionFlagName)
		if err != nil {
			return err, false
		}
		m.APIVersion = &apiVersionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationIPAddressesGetIPExtraFieldsIPAddressesFlag(m *ip_addresses.GetIPParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("extra_fields[ip_addresses]") {

		var extraFieldsIpAddressesFlagName string
		if cmdPrefix == "" {
			extraFieldsIpAddressesFlagName = "extra_fields[ip_addresses]"
		} else {
			extraFieldsIpAddressesFlagName = fmt.Sprintf("%v.extra_fields[ip_addresses]", cmdPrefix)
		}

		extraFieldsIpAddressesFlagValue, err := cmd.Flags().GetString(extraFieldsIpAddressesFlagName)
		if err != nil {
			return err, false
		}
		m.ExtraFieldsIPAddresses = &extraFieldsIpAddressesFlagValue

	}
	return nil, retAdded
}
func retrieveOperationIPAddressesGetIPIDFlag(m *ip_addresses.GetIPParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}

// parseOperationIPAddressesGetIPResult parses request result and return the string content
func parseOperationIPAddressesGetIPResult(resp0 *ip_addresses.GetIPOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*ip_addresses.GetIPOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*ip_addresses.GetIPNotFound)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
