package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/latitudesh/lsh/client/virtual_networks"
	"github.com/latitudesh/lsh/internal/utils"

	"github.com/spf13/cobra"
)

// makeOperationVirtualNetworksGetVirtualNetworksCmd returns a cmd to handle operation getVirtualNetworks
func makeOperationVirtualNetworksGetVirtualNetworksCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "list",
		Short: `Lists virtual networks assigned to a project.`,
		RunE:  runOperationVirtualNetworksGetVirtualNetworks,
	}

	if err := registerOperationVirtualNetworksGetVirtualNetworksParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationVirtualNetworksGetVirtualNetworks uses cmd flags to call endpoint api
func runOperationVirtualNetworksGetVirtualNetworks(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := virtual_networks.NewGetVirtualNetworksParams()
	if err, _ := retrieveOperationVirtualNetworksGetVirtualNetworksFilterLocationFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationVirtualNetworksGetVirtualNetworksFilterProjectFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}

	response, err := appCli.VirtualNetworks.GetVirtualNetworks(params, nil)
	if err != nil {
		utils.PrintError(err)
		return nil
	}

	if !debug {
		utils.Render(response.GetData())
	}

	return nil
}

// registerOperationVirtualNetworksGetVirtualNetworksParamFlags registers all flags needed to fill params
func registerOperationVirtualNetworksGetVirtualNetworksParamFlags(cmd *cobra.Command) error {
	if err := registerOperationVirtualNetworksGetVirtualNetworksFilterLocationParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationVirtualNetworksGetVirtualNetworksFilterProjectParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationVirtualNetworksGetVirtualNetworksFilterLocationParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	filterLocationDescription := `The location slug to filter by`

	var filterLocationFlagName string
	if cmdPrefix == "" {
		filterLocationFlagName = "location"
	} else {
		filterLocationFlagName = fmt.Sprintf("%v.location", cmdPrefix)
	}

	var filterLocationFlagDefault string

	_ = cmd.PersistentFlags().String(filterLocationFlagName, filterLocationFlagDefault, filterLocationDescription)

	return nil
}
func registerOperationVirtualNetworksGetVirtualNetworksFilterProjectParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	filterProjectDescription := `The project id or slug to filter by`

	var filterProjectFlagName string
	if cmdPrefix == "" {
		filterProjectFlagName = "project"
	} else {
		filterProjectFlagName = fmt.Sprintf("%v.project", cmdPrefix)
	}

	var filterProjectFlagDefault string

	_ = cmd.PersistentFlags().String(filterProjectFlagName, filterProjectFlagDefault, filterProjectDescription)

	return nil
}

func retrieveOperationVirtualNetworksGetVirtualNetworksFilterLocationFlag(m *virtual_networks.GetVirtualNetworksParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("location") {

		var filterLocationFlagName string
		if cmdPrefix == "" {
			filterLocationFlagName = "location"
		} else {
			filterLocationFlagName = fmt.Sprintf("%v.location", cmdPrefix)
		}

		filterLocationFlagValue, err := cmd.Flags().GetString(filterLocationFlagName)
		if err != nil {
			return err, false
		}
		m.FilterLocation = &filterLocationFlagValue

	}
	return nil, retAdded
}
func retrieveOperationVirtualNetworksGetVirtualNetworksFilterProjectFlag(m *virtual_networks.GetVirtualNetworksParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("project") {

		var filterProjectFlagName string
		if cmdPrefix == "" {
			filterProjectFlagName = "project"
		} else {
			filterProjectFlagName = fmt.Sprintf("%v.project", cmdPrefix)
		}

		filterProjectFlagValue, err := cmd.Flags().GetString(filterProjectFlagName)
		if err != nil {
			return err, false
		}
		m.FilterProject = &filterProjectFlagValue

	}
	return nil, retAdded
}
