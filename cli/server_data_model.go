// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/latitudesh/lsh/models"

	"github.com/spf13/cobra"
)

// Schema cli for ServerData

// register flags to command
func registerModelServerDataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServerDataAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerDataAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var attributesFlagName string
	if cmdPrefix == "" {
		attributesFlagName = "attributes"
	} else {
		attributesFlagName = fmt.Sprintf("%v.attributes", cmdPrefix)
	}

	if err := registerModelServerDataAttributesFlags(depth+1, attributesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerDataID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerServerDataType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServerDataFlags(depth int, m *models.ServerData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributesAdded := retrieveServerDataAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	err, idAdded := retrieveServerDataIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, typeAdded := retrieveServerDataTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveServerDataAttributesFlags(depth int, m *models.ServerData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%v.attributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// info: complex object attributes ServerDataAttributes is retrieved outside this Changed() block
	}
	attributesFlagValue := m.Attributes
	if swag.IsZero(attributesFlagValue) {
		attributesFlagValue = &models.ServerDataAttributes{}
	}

	err, attributesAdded := retrieveModelServerDataAttributesFlags(depth+1, attributesFlagValue, attributesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded
	if attributesAdded {
		m.Attributes = attributesFlagValue
	}

	return nil, retAdded
}

func retrieveServerDataIDFlags(depth int, m *models.ServerData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataTypeFlags(depth int, m *models.ServerData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for ServerDataAttributes

// register flags to command
func registerModelServerDataAttributesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServerDataAttributesCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesIpmiStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesOperatingSystem(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesPlan(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesPrimaryIPV4(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesPrimaryIPV6(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesProject(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesRegion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesRole(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesScheduledDeletionAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesSite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesSpecs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesTeam(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerDataAttributesCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdAtDescription := ``

	var createdAtFlagName string
	if cmdPrefix == "" {
		createdAtFlagName = "created_at"
	} else {
		createdAtFlagName = fmt.Sprintf("%v.created_at", cmdPrefix)
	}

	var createdAtFlagDefault string

	_ = cmd.PersistentFlags().String(createdAtFlagName, createdAtFlagDefault, createdAtDescription)

	return nil
}

func registerServerDataAttributesHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostnameDescription := ``

	var hostnameFlagName string
	if cmdPrefix == "" {
		hostnameFlagName = "hostname"
	} else {
		hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
	}

	var hostnameFlagDefault string

	_ = cmd.PersistentFlags().String(hostnameFlagName, hostnameFlagDefault, hostnameDescription)

	return nil
}

func registerServerDataAttributesIpmiStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipmiStatusDescription := `Enum: ["Unavailable","Intermittent","Normal"]. `

	var ipmiStatusFlagName string
	if cmdPrefix == "" {
		ipmiStatusFlagName = "ipmi_status"
	} else {
		ipmiStatusFlagName = fmt.Sprintf("%v.ipmi_status", cmdPrefix)
	}

	var ipmiStatusFlagDefault string

	_ = cmd.PersistentFlags().String(ipmiStatusFlagName, ipmiStatusFlagDefault, ipmiStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(ipmiStatusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["Unavailable","Intermittent","Normal"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerDataAttributesOperatingSystem(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var operatingSystemFlagName string
	if cmdPrefix == "" {
		operatingSystemFlagName = "operating_system"
	} else {
		operatingSystemFlagName = fmt.Sprintf("%v.operating_system", cmdPrefix)
	}

	if err := registerModelServerDataAttributesOperatingSystemFlags(depth+1, operatingSystemFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerDataAttributesPlan(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var planFlagName string
	if cmdPrefix == "" {
		planFlagName = "plan"
	} else {
		planFlagName = fmt.Sprintf("%v.plan", cmdPrefix)
	}

	if err := registerModelServerDataAttributesPlanFlags(depth+1, planFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerDataAttributesPrimaryIPV4(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	primaryIpv4Description := ``

	var primaryIpv4FlagName string
	if cmdPrefix == "" {
		primaryIpv4FlagName = "primary_ipv4"
	} else {
		primaryIpv4FlagName = fmt.Sprintf("%v.primary_ipv4", cmdPrefix)
	}

	var primaryIpv4FlagDefault string

	_ = cmd.PersistentFlags().String(primaryIpv4FlagName, primaryIpv4FlagDefault, primaryIpv4Description)

	return nil
}

func registerServerDataAttributesPrimaryIPV6(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	primaryIpv6Description := ``

	var primaryIpv6FlagName string
	if cmdPrefix == "" {
		primaryIpv6FlagName = "primary_ipv6"
	} else {
		primaryIpv6FlagName = fmt.Sprintf("%v.primary_ipv6", cmdPrefix)
	}

	var primaryIpv6FlagDefault string

	_ = cmd.PersistentFlags().String(primaryIpv6FlagName, primaryIpv6FlagDefault, primaryIpv6Description)

	return nil
}

func registerServerDataAttributesProject(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var projectFlagName string
	if cmdPrefix == "" {
		projectFlagName = "project"
	} else {
		projectFlagName = fmt.Sprintf("%v.project", cmdPrefix)
	}

	if err := registerModelProjectIncludeFlags(depth+1, projectFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerDataAttributesRegion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var regionFlagName string
	if cmdPrefix == "" {
		regionFlagName = "region"
	} else {
		regionFlagName = fmt.Sprintf("%v.region", cmdPrefix)
	}

	if err := registerModelRegionResourceDataFlags(depth+1, regionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerDataAttributesRole(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	roleDescription := ``

	var roleFlagName string
	if cmdPrefix == "" {
		roleFlagName = "role"
	} else {
		roleFlagName = fmt.Sprintf("%v.role", cmdPrefix)
	}

	var roleFlagDefault string

	_ = cmd.PersistentFlags().String(roleFlagName, roleFlagDefault, roleDescription)

	return nil
}

func registerServerDataAttributesScheduledDeletionAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scheduledDeletionAtDescription := ``

	var scheduledDeletionAtFlagName string
	if cmdPrefix == "" {
		scheduledDeletionAtFlagName = "scheduled_deletion_at"
	} else {
		scheduledDeletionAtFlagName = fmt.Sprintf("%v.scheduled_deletion_at", cmdPrefix)
	}

	var scheduledDeletionAtFlagDefault string

	_ = cmd.PersistentFlags().String(scheduledDeletionAtFlagName, scheduledDeletionAtFlagDefault, scheduledDeletionAtDescription)

	return nil
}

func registerServerDataAttributesSite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	siteDescription := ``

	var siteFlagName string
	if cmdPrefix == "" {
		siteFlagName = "site"
	} else {
		siteFlagName = fmt.Sprintf("%v.site", cmdPrefix)
	}

	var siteFlagDefault string

	_ = cmd.PersistentFlags().String(siteFlagName, siteFlagDefault, siteDescription)

	return nil
}

func registerServerDataAttributesSpecs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var specsFlagName string
	if cmdPrefix == "" {
		specsFlagName = "specs"
	} else {
		specsFlagName = fmt.Sprintf("%v.specs", cmdPrefix)
	}

	if err := registerModelServerDataAttributesSpecsFlags(depth+1, specsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerDataAttributesStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Enum: ["on","off","unknown","ready","disk_erasing","failed_disk_erasing","deploying","failed_deployment"]. ` + "`" + `on` + "`" + ` - The server is powered ON
` + "`" + `off` + "`" + ` - The server is powered OFF
` + "`" + `unknown` + "`" + ` - The server power status is unknown
` + "`" + `ready` + "`" + ` - The server is in reinstalling state ` + "`" + `ready` + "`" + ` and should start ` + "`" + `disk_erasing` + "`" + ` shortly
` + "`" + `disk_erasing` + "`" + ` - The server is in reinstalling state ` + "`" + `disk_erasing` + "`" + `
` + "`" + `failed_disk_erasing` + "`" + ` - The server has failed disk erasing in reinstall
` + "`" + `deploying` + "`" + ` - The server is in the last reinstalling stage and is ` + "`" + `deploying` + "`" + `
` + "`" + `failed_deployment` + "`" + ` The server has failed deployment in reinstall
`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	if err := cmd.RegisterFlagCompletionFunc(statusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["on","off","unknown","ready","disk_erasing","failed_disk_erasing","deploying","failed_deployment"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServerDataAttributesTeam(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var teamFlagName string
	if cmdPrefix == "" {
		teamFlagName = "team"
	} else {
		teamFlagName = fmt.Sprintf("%v.team", cmdPrefix)
	}

	if err := registerModelTeamIncludeFlags(depth+1, teamFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServerDataAttributesFlags(depth int, m *models.ServerDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, createdAtAdded := retrieveServerDataAttributesCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAtAdded

	err, hostnameAdded := retrieveServerDataAttributesHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostnameAdded

	err, ipmiStatusAdded := retrieveServerDataAttributesIpmiStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipmiStatusAdded

	err, operatingSystemAdded := retrieveServerDataAttributesOperatingSystemFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || operatingSystemAdded

	err, planAdded := retrieveServerDataAttributesPlanFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || planAdded

	err, primaryIpv4Added := retrieveServerDataAttributesPrimaryIPV4Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || primaryIpv4Added

	err, primaryIpv6Added := retrieveServerDataAttributesPrimaryIPV6Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || primaryIpv6Added

	err, projectAdded := retrieveServerDataAttributesProjectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectAdded

	err, regionAdded := retrieveServerDataAttributesRegionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || regionAdded

	err, roleAdded := retrieveServerDataAttributesRoleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || roleAdded

	err, scheduledDeletionAtAdded := retrieveServerDataAttributesScheduledDeletionAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scheduledDeletionAtAdded

	err, siteAdded := retrieveServerDataAttributesSiteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || siteAdded

	err, specsAdded := retrieveServerDataAttributesSpecsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || specsAdded

	err, statusAdded := retrieveServerDataAttributesStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, teamAdded := retrieveServerDataAttributesTeamFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || teamAdded

	return nil, retAdded
}

func retrieveServerDataAttributesCreatedAtFlags(depth int, m *models.ServerDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdAtFlagName := fmt.Sprintf("%v.created_at", cmdPrefix)
	if cmd.Flags().Changed(createdAtFlagName) {

		var createdAtFlagName string
		if cmdPrefix == "" {
			createdAtFlagName = "created_at"
		} else {
			createdAtFlagName = fmt.Sprintf("%v.created_at", cmdPrefix)
		}

		createdAtFlagValue, err := cmd.Flags().GetString(createdAtFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = &createdAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataAttributesHostnameFlags(depth int, m *models.ServerDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostnameFlagName := fmt.Sprintf("%v.hostname", cmdPrefix)
	if cmd.Flags().Changed(hostnameFlagName) {

		var hostnameFlagName string
		if cmdPrefix == "" {
			hostnameFlagName = "hostname"
		} else {
			hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
		}

		hostnameFlagValue, err := cmd.Flags().GetString(hostnameFlagName)
		if err != nil {
			return err, false
		}
		m.Hostname = hostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataAttributesIpmiStatusFlags(depth int, m *models.ServerDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipmiStatusFlagName := fmt.Sprintf("%v.ipmi_status", cmdPrefix)
	if cmd.Flags().Changed(ipmiStatusFlagName) {

		var ipmiStatusFlagName string
		if cmdPrefix == "" {
			ipmiStatusFlagName = "ipmi_status"
		} else {
			ipmiStatusFlagName = fmt.Sprintf("%v.ipmi_status", cmdPrefix)
		}

		ipmiStatusFlagValue, err := cmd.Flags().GetString(ipmiStatusFlagName)
		if err != nil {
			return err, false
		}
		m.IpmiStatus = ipmiStatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataAttributesOperatingSystemFlags(depth int, m *models.ServerDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	operatingSystemFlagName := fmt.Sprintf("%v.operating_system", cmdPrefix)
	if cmd.Flags().Changed(operatingSystemFlagName) {
		// info: complex object operating_system ServerDataAttributesOperatingSystem is retrieved outside this Changed() block
	}
	operatingSystemFlagValue := m.OperatingSystem
	if swag.IsZero(operatingSystemFlagValue) {
		operatingSystemFlagValue = &models.ServerDataAttributesOperatingSystem{}
	}

	err, operatingSystemAdded := retrieveModelServerDataAttributesOperatingSystemFlags(depth+1, operatingSystemFlagValue, operatingSystemFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || operatingSystemAdded
	if operatingSystemAdded {
		m.OperatingSystem = operatingSystemFlagValue
	}

	return nil, retAdded
}

func retrieveServerDataAttributesPlanFlags(depth int, m *models.ServerDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	planFlagName := fmt.Sprintf("%v.plan", cmdPrefix)
	if cmd.Flags().Changed(planFlagName) {
		// info: complex object plan ServerDataAttributesPlan is retrieved outside this Changed() block
	}
	planFlagValue := m.Plan
	if swag.IsZero(planFlagValue) {
		planFlagValue = &models.ServerDataAttributesPlan{}
	}

	err, planAdded := retrieveModelServerDataAttributesPlanFlags(depth+1, planFlagValue, planFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || planAdded
	if planAdded {
		m.Plan = planFlagValue
	}

	return nil, retAdded
}

func retrieveServerDataAttributesPrimaryIPV4Flags(depth int, m *models.ServerDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	primaryIpv4FlagName := fmt.Sprintf("%v.primary_ipv4", cmdPrefix)
	if cmd.Flags().Changed(primaryIpv4FlagName) {

		var primaryIpv4FlagName string
		if cmdPrefix == "" {
			primaryIpv4FlagName = "primary_ipv4"
		} else {
			primaryIpv4FlagName = fmt.Sprintf("%v.primary_ipv4", cmdPrefix)
		}

		primaryIpv4FlagValue, err := cmd.Flags().GetString(primaryIpv4FlagName)
		if err != nil {
			return err, false
		}
		m.PrimaryIPV4 = &primaryIpv4FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataAttributesPrimaryIPV6Flags(depth int, m *models.ServerDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	primaryIpv6FlagName := fmt.Sprintf("%v.primary_ipv6", cmdPrefix)
	if cmd.Flags().Changed(primaryIpv6FlagName) {

		var primaryIpv6FlagName string
		if cmdPrefix == "" {
			primaryIpv6FlagName = "primary_ipv6"
		} else {
			primaryIpv6FlagName = fmt.Sprintf("%v.primary_ipv6", cmdPrefix)
		}

		primaryIpv6FlagValue, err := cmd.Flags().GetString(primaryIpv6FlagName)
		if err != nil {
			return err, false
		}
		m.PrimaryIPV6 = &primaryIpv6FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataAttributesProjectFlags(depth int, m *models.ServerDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectFlagName := fmt.Sprintf("%v.project", cmdPrefix)
	if cmd.Flags().Changed(projectFlagName) {
		// info: complex object project ProjectInclude is retrieved outside this Changed() block
	}
	projectFlagValue := m.Project
	if swag.IsZero(projectFlagValue) {
		projectFlagValue = &models.ProjectInclude{}
	}

	err, projectAdded := retrieveModelProjectIncludeFlags(depth+1, projectFlagValue, projectFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectAdded
	if projectAdded {
		m.Project = projectFlagValue
	}

	return nil, retAdded
}

func retrieveServerDataAttributesRegionFlags(depth int, m *models.ServerDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	regionFlagName := fmt.Sprintf("%v.region", cmdPrefix)
	if cmd.Flags().Changed(regionFlagName) {
		// info: complex object region RegionResourceData is retrieved outside this Changed() block
	}
	regionFlagValue := m.Region
	if swag.IsZero(regionFlagValue) {
		regionFlagValue = &models.RegionResourceData{}
	}

	err, regionAdded := retrieveModelRegionResourceDataFlags(depth+1, regionFlagValue, regionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || regionAdded
	if regionAdded {
		m.Region = regionFlagValue
	}

	return nil, retAdded
}

func retrieveServerDataAttributesRoleFlags(depth int, m *models.ServerDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	roleFlagName := fmt.Sprintf("%v.role", cmdPrefix)
	if cmd.Flags().Changed(roleFlagName) {

		var roleFlagName string
		if cmdPrefix == "" {
			roleFlagName = "role"
		} else {
			roleFlagName = fmt.Sprintf("%v.role", cmdPrefix)
		}

		roleFlagValue, err := cmd.Flags().GetString(roleFlagName)
		if err != nil {
			return err, false
		}
		m.Role = roleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataAttributesScheduledDeletionAtFlags(depth int, m *models.ServerDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scheduledDeletionAtFlagName := fmt.Sprintf("%v.scheduled_deletion_at", cmdPrefix)
	if cmd.Flags().Changed(scheduledDeletionAtFlagName) {

		var scheduledDeletionAtFlagName string
		if cmdPrefix == "" {
			scheduledDeletionAtFlagName = "scheduled_deletion_at"
		} else {
			scheduledDeletionAtFlagName = fmt.Sprintf("%v.scheduled_deletion_at", cmdPrefix)
		}

		scheduledDeletionAtFlagValue, err := cmd.Flags().GetString(scheduledDeletionAtFlagName)
		if err != nil {
			return err, false
		}
		m.ScheduledDeletionAt = &scheduledDeletionAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataAttributesSiteFlags(depth int, m *models.ServerDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	siteFlagName := fmt.Sprintf("%v.site", cmdPrefix)
	if cmd.Flags().Changed(siteFlagName) {

		var siteFlagName string
		if cmdPrefix == "" {
			siteFlagName = "site"
		} else {
			siteFlagName = fmt.Sprintf("%v.site", cmdPrefix)
		}

		siteFlagValue, err := cmd.Flags().GetString(siteFlagName)
		if err != nil {
			return err, false
		}
		m.Site = siteFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataAttributesSpecsFlags(depth int, m *models.ServerDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	specsFlagName := fmt.Sprintf("%v.specs", cmdPrefix)
	if cmd.Flags().Changed(specsFlagName) {
		// info: complex object specs ServerDataAttributesSpecs is retrieved outside this Changed() block
	}
	specsFlagValue := m.Specs
	if swag.IsZero(specsFlagValue) {
		specsFlagValue = &models.ServerDataAttributesSpecs{}
	}

	err, specsAdded := retrieveModelServerDataAttributesSpecsFlags(depth+1, specsFlagValue, specsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || specsAdded
	if specsAdded {
		m.Specs = specsFlagValue
	}

	return nil, retAdded
}

func retrieveServerDataAttributesStatusFlags(depth int, m *models.ServerDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataAttributesTeamFlags(depth int, m *models.ServerDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	teamFlagName := fmt.Sprintf("%v.team", cmdPrefix)
	if cmd.Flags().Changed(teamFlagName) {
		// info: complex object team TeamInclude is retrieved outside this Changed() block
	}
	teamFlagValue := m.Team
	if swag.IsZero(teamFlagValue) {
		teamFlagValue = &models.TeamInclude{}
	}

	err, teamAdded := retrieveModelTeamIncludeFlags(depth+1, teamFlagValue, teamFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || teamAdded
	if teamAdded {
		m.Team = teamFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for ServerDataAttributesOperatingSystem

// register flags to command
func registerModelServerDataAttributesOperatingSystemFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServerDataAttributesOperatingSystemDistro(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesOperatingSystemFeatures(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesOperatingSystemName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesOperatingSystemSlug(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesOperatingSystemVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerDataAttributesOperatingSystemDistro(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var distroFlagName string
	if cmdPrefix == "" {
		distroFlagName = "distro"
	} else {
		distroFlagName = fmt.Sprintf("%v.distro", cmdPrefix)
	}

	if err := registerModelServerDataAttributesOperatingSystemDistroFlags(depth+1, distroFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerDataAttributesOperatingSystemFeatures(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var featuresFlagName string
	if cmdPrefix == "" {
		featuresFlagName = "features"
	} else {
		featuresFlagName = fmt.Sprintf("%v.features", cmdPrefix)
	}

	if err := registerModelServerDataAttributesOperatingSystemFeaturesFlags(depth+1, featuresFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerDataAttributesOperatingSystemName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `The OS name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerServerDataAttributesOperatingSystemSlug(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	slugDescription := `The OS slug`

	var slugFlagName string
	if cmdPrefix == "" {
		slugFlagName = "slug"
	} else {
		slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
	}

	var slugFlagDefault string

	_ = cmd.PersistentFlags().String(slugFlagName, slugFlagDefault, slugDescription)

	return nil
}

func registerServerDataAttributesOperatingSystemVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := `The OS description`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServerDataAttributesOperatingSystemFlags(depth int, m *models.ServerDataAttributesOperatingSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, distroAdded := retrieveServerDataAttributesOperatingSystemDistroFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || distroAdded

	err, featuresAdded := retrieveServerDataAttributesOperatingSystemFeaturesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || featuresAdded

	err, nameAdded := retrieveServerDataAttributesOperatingSystemNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, slugAdded := retrieveServerDataAttributesOperatingSystemSlugFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || slugAdded

	err, versionAdded := retrieveServerDataAttributesOperatingSystemVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	return nil, retAdded
}

func retrieveServerDataAttributesOperatingSystemDistroFlags(depth int, m *models.ServerDataAttributesOperatingSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	distroFlagName := fmt.Sprintf("%v.distro", cmdPrefix)
	if cmd.Flags().Changed(distroFlagName) {
		// info: complex object distro ServerDataAttributesOperatingSystemDistro is retrieved outside this Changed() block
	}
	distroFlagValue := m.Distro
	if swag.IsZero(distroFlagValue) {
		distroFlagValue = &models.ServerDataAttributesOperatingSystemDistro{}
	}

	err, distroAdded := retrieveModelServerDataAttributesOperatingSystemDistroFlags(depth+1, distroFlagValue, distroFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || distroAdded
	if distroAdded {
		m.Distro = distroFlagValue
	}

	return nil, retAdded
}

func retrieveServerDataAttributesOperatingSystemFeaturesFlags(depth int, m *models.ServerDataAttributesOperatingSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	featuresFlagName := fmt.Sprintf("%v.features", cmdPrefix)
	if cmd.Flags().Changed(featuresFlagName) {
		// info: complex object features ServerDataAttributesOperatingSystemFeatures is retrieved outside this Changed() block
	}
	featuresFlagValue := m.Features
	if swag.IsZero(featuresFlagValue) {
		featuresFlagValue = &models.ServerDataAttributesOperatingSystemFeatures{}
	}

	err, featuresAdded := retrieveModelServerDataAttributesOperatingSystemFeaturesFlags(depth+1, featuresFlagValue, featuresFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || featuresAdded
	if featuresAdded {
		m.Features = featuresFlagValue
	}

	return nil, retAdded
}

func retrieveServerDataAttributesOperatingSystemNameFlags(depth int, m *models.ServerDataAttributesOperatingSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataAttributesOperatingSystemSlugFlags(depth int, m *models.ServerDataAttributesOperatingSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	slugFlagName := fmt.Sprintf("%v.slug", cmdPrefix)
	if cmd.Flags().Changed(slugFlagName) {

		var slugFlagName string
		if cmdPrefix == "" {
			slugFlagName = "slug"
		} else {
			slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
		}

		slugFlagValue, err := cmd.Flags().GetString(slugFlagName)
		if err != nil {
			return err, false
		}
		m.Slug = slugFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataAttributesOperatingSystemVersionFlags(depth int, m *models.ServerDataAttributesOperatingSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for ServerDataAttributesOperatingSystemDistro

// register flags to command
func registerModelServerDataAttributesOperatingSystemDistroFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServerDataAttributesOperatingSystemDistroName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesOperatingSystemDistroSeries(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesOperatingSystemDistroSlug(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerDataAttributesOperatingSystemDistroName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `The OS Distro name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerServerDataAttributesOperatingSystemDistroSeries(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	seriesDescription := `The OS Distro Series`

	var seriesFlagName string
	if cmdPrefix == "" {
		seriesFlagName = "series"
	} else {
		seriesFlagName = fmt.Sprintf("%v.series", cmdPrefix)
	}

	var seriesFlagDefault string

	_ = cmd.PersistentFlags().String(seriesFlagName, seriesFlagDefault, seriesDescription)

	return nil
}

func registerServerDataAttributesOperatingSystemDistroSlug(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	slugDescription := `The OS Distro slug`

	var slugFlagName string
	if cmdPrefix == "" {
		slugFlagName = "slug"
	} else {
		slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
	}

	var slugFlagDefault string

	_ = cmd.PersistentFlags().String(slugFlagName, slugFlagDefault, slugDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServerDataAttributesOperatingSystemDistroFlags(depth int, m *models.ServerDataAttributesOperatingSystemDistro, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, nameAdded := retrieveServerDataAttributesOperatingSystemDistroNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, seriesAdded := retrieveServerDataAttributesOperatingSystemDistroSeriesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || seriesAdded

	err, slugAdded := retrieveServerDataAttributesOperatingSystemDistroSlugFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || slugAdded

	return nil, retAdded
}

func retrieveServerDataAttributesOperatingSystemDistroNameFlags(depth int, m *models.ServerDataAttributesOperatingSystemDistro, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataAttributesOperatingSystemDistroSeriesFlags(depth int, m *models.ServerDataAttributesOperatingSystemDistro, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	seriesFlagName := fmt.Sprintf("%v.series", cmdPrefix)
	if cmd.Flags().Changed(seriesFlagName) {

		var seriesFlagName string
		if cmdPrefix == "" {
			seriesFlagName = "series"
		} else {
			seriesFlagName = fmt.Sprintf("%v.series", cmdPrefix)
		}

		seriesFlagValue, err := cmd.Flags().GetString(seriesFlagName)
		if err != nil {
			return err, false
		}
		m.Series = seriesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataAttributesOperatingSystemDistroSlugFlags(depth int, m *models.ServerDataAttributesOperatingSystemDistro, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	slugFlagName := fmt.Sprintf("%v.slug", cmdPrefix)
	if cmd.Flags().Changed(slugFlagName) {

		var slugFlagName string
		if cmdPrefix == "" {
			slugFlagName = "slug"
		} else {
			slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
		}

		slugFlagValue, err := cmd.Flags().GetString(slugFlagName)
		if err != nil {
			return err, false
		}
		m.Slug = slugFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for ServerDataAttributesOperatingSystemFeatures

// register flags to command
func registerModelServerDataAttributesOperatingSystemFeaturesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServerDataAttributesOperatingSystemFeaturesRaid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesOperatingSystemFeaturesSSHKeys(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesOperatingSystemFeaturesUserData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerDataAttributesOperatingSystemFeaturesRaid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	raidDescription := ``

	var raidFlagName string
	if cmdPrefix == "" {
		raidFlagName = "raid"
	} else {
		raidFlagName = fmt.Sprintf("%v.raid", cmdPrefix)
	}

	var raidFlagDefault bool

	_ = cmd.PersistentFlags().Bool(raidFlagName, raidFlagDefault, raidDescription)

	return nil
}

func registerServerDataAttributesOperatingSystemFeaturesSSHKeys(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sshKeysDescription := ``

	var sshKeysFlagName string
	if cmdPrefix == "" {
		sshKeysFlagName = "ssh_keys"
	} else {
		sshKeysFlagName = fmt.Sprintf("%v.ssh_keys", cmdPrefix)
	}

	var sshKeysFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sshKeysFlagName, sshKeysFlagDefault, sshKeysDescription)

	return nil
}

func registerServerDataAttributesOperatingSystemFeaturesUserData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userDataDescription := ``

	var userDataFlagName string
	if cmdPrefix == "" {
		userDataFlagName = "user_data"
	} else {
		userDataFlagName = fmt.Sprintf("%v.user_data", cmdPrefix)
	}

	var userDataFlagDefault bool

	_ = cmd.PersistentFlags().Bool(userDataFlagName, userDataFlagDefault, userDataDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServerDataAttributesOperatingSystemFeaturesFlags(depth int, m *models.ServerDataAttributesOperatingSystemFeatures, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, raidAdded := retrieveServerDataAttributesOperatingSystemFeaturesRaidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || raidAdded

	err, sshKeysAdded := retrieveServerDataAttributesOperatingSystemFeaturesSSHKeysFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sshKeysAdded

	err, userDataAdded := retrieveServerDataAttributesOperatingSystemFeaturesUserDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userDataAdded

	return nil, retAdded
}

func retrieveServerDataAttributesOperatingSystemFeaturesRaidFlags(depth int, m *models.ServerDataAttributesOperatingSystemFeatures, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	raidFlagName := fmt.Sprintf("%v.raid", cmdPrefix)
	if cmd.Flags().Changed(raidFlagName) {

		var raidFlagName string
		if cmdPrefix == "" {
			raidFlagName = "raid"
		} else {
			raidFlagName = fmt.Sprintf("%v.raid", cmdPrefix)
		}

		raidFlagValue, err := cmd.Flags().GetBool(raidFlagName)
		if err != nil {
			return err, false
		}
		m.Raid = raidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataAttributesOperatingSystemFeaturesSSHKeysFlags(depth int, m *models.ServerDataAttributesOperatingSystemFeatures, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sshKeysFlagName := fmt.Sprintf("%v.ssh_keys", cmdPrefix)
	if cmd.Flags().Changed(sshKeysFlagName) {

		var sshKeysFlagName string
		if cmdPrefix == "" {
			sshKeysFlagName = "ssh_keys"
		} else {
			sshKeysFlagName = fmt.Sprintf("%v.ssh_keys", cmdPrefix)
		}

		sshKeysFlagValue, err := cmd.Flags().GetBool(sshKeysFlagName)
		if err != nil {
			return err, false
		}
		m.SSHKeys = sshKeysFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataAttributesOperatingSystemFeaturesUserDataFlags(depth int, m *models.ServerDataAttributesOperatingSystemFeatures, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userDataFlagName := fmt.Sprintf("%v.user_data", cmdPrefix)
	if cmd.Flags().Changed(userDataFlagName) {

		var userDataFlagName string
		if cmdPrefix == "" {
			userDataFlagName = "user_data"
		} else {
			userDataFlagName = fmt.Sprintf("%v.user_data", cmdPrefix)
		}

		userDataFlagValue, err := cmd.Flags().GetBool(userDataFlagName)
		if err != nil {
			return err, false
		}
		m.UserData = userDataFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for ServerDataAttributesPlan

// register flags to command
func registerModelServerDataAttributesPlanFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServerDataAttributesPlanBilling(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesPlanID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesPlanName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerDataAttributesPlanBilling(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	billingDescription := `hourly/monthly pricing. Defaults to ` + "`" + `hourly` + "`" + `. Appliable for ` + "`" + `on_demand` + "`" + ` projects only.`

	var billingFlagName string
	if cmdPrefix == "" {
		billingFlagName = "billing"
	} else {
		billingFlagName = fmt.Sprintf("%v.billing", cmdPrefix)
	}

	var billingFlagDefault string

	_ = cmd.PersistentFlags().String(billingFlagName, billingFlagDefault, billingDescription)

	return nil
}

func registerServerDataAttributesPlanID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `The plan ID`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerServerDataAttributesPlanName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `The plan name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServerDataAttributesPlanFlags(depth int, m *models.ServerDataAttributesPlan, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, billingAdded := retrieveServerDataAttributesPlanBillingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || billingAdded

	err, idAdded := retrieveServerDataAttributesPlanIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveServerDataAttributesPlanNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	return nil, retAdded
}

func retrieveServerDataAttributesPlanBillingFlags(depth int, m *models.ServerDataAttributesPlan, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	billingFlagName := fmt.Sprintf("%v.billing", cmdPrefix)
	if cmd.Flags().Changed(billingFlagName) {

		var billingFlagName string
		if cmdPrefix == "" {
			billingFlagName = "billing"
		} else {
			billingFlagName = fmt.Sprintf("%v.billing", cmdPrefix)
		}

		billingFlagValue, err := cmd.Flags().GetString(billingFlagName)
		if err != nil {
			return err, false
		}
		m.Billing = &billingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataAttributesPlanIDFlags(depth int, m *models.ServerDataAttributesPlan, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataAttributesPlanNameFlags(depth int, m *models.ServerDataAttributesPlan, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for ServerDataAttributesSpecs

// register flags to command
func registerModelServerDataAttributesSpecsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServerDataAttributesSpecsCPU(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesSpecsDisk(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerDataAttributesSpecsRAM(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerDataAttributesSpecsCPU(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpuDescription := ``

	var cpuFlagName string
	if cmdPrefix == "" {
		cpuFlagName = "cpu"
	} else {
		cpuFlagName = fmt.Sprintf("%v.cpu", cmdPrefix)
	}

	var cpuFlagDefault string

	_ = cmd.PersistentFlags().String(cpuFlagName, cpuFlagDefault, cpuDescription)

	return nil
}

func registerServerDataAttributesSpecsDisk(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	diskDescription := ``

	var diskFlagName string
	if cmdPrefix == "" {
		diskFlagName = "disk"
	} else {
		diskFlagName = fmt.Sprintf("%v.disk", cmdPrefix)
	}

	var diskFlagDefault string

	_ = cmd.PersistentFlags().String(diskFlagName, diskFlagDefault, diskDescription)

	return nil
}

func registerServerDataAttributesSpecsRAM(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ramDescription := ``

	var ramFlagName string
	if cmdPrefix == "" {
		ramFlagName = "ram"
	} else {
		ramFlagName = fmt.Sprintf("%v.ram", cmdPrefix)
	}

	var ramFlagDefault string

	_ = cmd.PersistentFlags().String(ramFlagName, ramFlagDefault, ramDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServerDataAttributesSpecsFlags(depth int, m *models.ServerDataAttributesSpecs, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cpuAdded := retrieveServerDataAttributesSpecsCPUFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuAdded

	err, diskAdded := retrieveServerDataAttributesSpecsDiskFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || diskAdded

	err, ramAdded := retrieveServerDataAttributesSpecsRAMFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ramAdded

	return nil, retAdded
}

func retrieveServerDataAttributesSpecsCPUFlags(depth int, m *models.ServerDataAttributesSpecs, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cpuFlagName := fmt.Sprintf("%v.cpu", cmdPrefix)
	if cmd.Flags().Changed(cpuFlagName) {

		var cpuFlagName string
		if cmdPrefix == "" {
			cpuFlagName = "cpu"
		} else {
			cpuFlagName = fmt.Sprintf("%v.cpu", cmdPrefix)
		}

		cpuFlagValue, err := cmd.Flags().GetString(cpuFlagName)
		if err != nil {
			return err, false
		}
		m.CPU = cpuFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataAttributesSpecsDiskFlags(depth int, m *models.ServerDataAttributesSpecs, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	diskFlagName := fmt.Sprintf("%v.disk", cmdPrefix)
	if cmd.Flags().Changed(diskFlagName) {

		var diskFlagName string
		if cmdPrefix == "" {
			diskFlagName = "disk"
		} else {
			diskFlagName = fmt.Sprintf("%v.disk", cmdPrefix)
		}

		diskFlagValue, err := cmd.Flags().GetString(diskFlagName)
		if err != nil {
			return err, false
		}
		m.Disk = diskFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerDataAttributesSpecsRAMFlags(depth int, m *models.ServerDataAttributesSpecs, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ramFlagName := fmt.Sprintf("%v.ram", cmdPrefix)
	if cmd.Flags().Changed(ramFlagName) {

		var ramFlagName string
		if cmdPrefix == "" {
			ramFlagName = "ram"
		} else {
			ramFlagName = fmt.Sprintf("%v.ram", cmdPrefix)
		}

		ramFlagValue, err := cmd.Flags().GetString(ramFlagName)
		if err != nil {
			return err, false
		}
		m.RAM = ramFlagValue

		retAdded = true
	}

	return nil, retAdded
}
