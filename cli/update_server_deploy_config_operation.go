// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/latitudesh/cli/client/deploy_config"
	"github.com/latitudesh/cli/internal/utils"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationDeployConfigUpdateServerDeployConfigCmd returns a cmd to handle operation updateServerDeployConfig
func makeOperationDeployConfigUpdateServerDeployConfigCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "update-server-deploy-config",
		Short: ``,
		RunE:  runOperationDeployConfigUpdateServerDeployConfig,
	}

	if err := registerOperationDeployConfigUpdateServerDeployConfigParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationDeployConfigUpdateServerDeployConfig uses cmd flags to call endpoint api
func runOperationDeployConfigUpdateServerDeployConfig(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := deploy_config.NewUpdateServerDeployConfigParams()
	params.SetDefaults()
	if err, _ := retrieveOperationDeployConfigUpdateServerDeployConfigAPIVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationDeployConfigUpdateServerDeployConfigBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationDeployConfigUpdateServerDeployConfigServerIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationDeployConfigUpdateServerDeployConfigResult(appCli.DeployConfig.UpdateServerDeployConfig(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(utils.PrettifyJson(msgStr))
	}
	return nil
}

// registerOperationDeployConfigUpdateServerDeployConfigParamFlags registers all flags needed to fill params
func registerOperationDeployConfigUpdateServerDeployConfigParamFlags(cmd *cobra.Command) error {
	if err := registerOperationDeployConfigUpdateServerDeployConfigAPIVersionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationDeployConfigUpdateServerDeployConfigBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationDeployConfigUpdateServerDeployConfigServerIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationDeployConfigUpdateServerDeployConfigAPIVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	apiVersionDescription := ``

	var apiVersionFlagName string
	if cmdPrefix == "" {
		apiVersionFlagName = "API-Version"
	} else {
		apiVersionFlagName = fmt.Sprintf("%v.API-Version", cmdPrefix)
	}

	var apiVersionFlagDefault string = "2023-06-01"

	_ = cmd.PersistentFlags().String(apiVersionFlagName, apiVersionFlagDefault, apiVersionDescription)

	return nil
}
func registerOperationDeployConfigUpdateServerDeployConfigBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFlagName, "", "Optional json string for [body]. ")

	// add flags for body
	if err := registerModelUpdateServerDeployConfigBodyFlags(0, "updateServerDeployConfigBody", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationDeployConfigUpdateServerDeployConfigServerIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	serverIdDescription := `Required. The Server ID`

	var serverIdFlagName string
	if cmdPrefix == "" {
		serverIdFlagName = "server_id"
	} else {
		serverIdFlagName = fmt.Sprintf("%v.server_id", cmdPrefix)
	}

	var serverIdFlagDefault string

	_ = cmd.PersistentFlags().String(serverIdFlagName, serverIdFlagDefault, serverIdDescription)

	return nil
}

func retrieveOperationDeployConfigUpdateServerDeployConfigAPIVersionFlag(m *deploy_config.UpdateServerDeployConfigParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("API-Version") {

		var apiVersionFlagName string
		if cmdPrefix == "" {
			apiVersionFlagName = "API-Version"
		} else {
			apiVersionFlagName = fmt.Sprintf("%v.API-Version", cmdPrefix)
		}

		apiVersionFlagValue, err := cmd.Flags().GetString(apiVersionFlagName)
		if err != nil {
			return err, false
		}
		m.APIVersion = &apiVersionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationDeployConfigUpdateServerDeployConfigBodyFlag(m *deploy_config.UpdateServerDeployConfigParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := deploy_config.UpdateServerDeployConfigBody{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in UpdateServerDeployConfigBody: %v", err), false
		}
		m.Body = bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = deploy_config.UpdateServerDeployConfigBody{}
	}
	err, added := retrieveModelUpdateServerDeployConfigBodyFlags(0, &bodyValueModel, "updateServerDeployConfigBody", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	if dryRun && debug {

		bodyValueDebugBytes, err := json.Marshal(m.Body)
		if err != nil {
			return err, false
		}
		logDebugf("Body dry-run payload: %v", string(bodyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationDeployConfigUpdateServerDeployConfigServerIDFlag(m *deploy_config.UpdateServerDeployConfigParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("server_id") {

		var serverIdFlagName string
		if cmdPrefix == "" {
			serverIdFlagName = "server_id"
		} else {
			serverIdFlagName = fmt.Sprintf("%v.server_id", cmdPrefix)
		}

		serverIdFlagValue, err := cmd.Flags().GetString(serverIdFlagName)
		if err != nil {
			return err, false
		}
		m.ServerID = serverIdFlagValue

	}
	return nil, retAdded
}

// parseOperationDeployConfigUpdateServerDeployConfigResult parses request result and return the string content
func parseOperationDeployConfigUpdateServerDeployConfigResult(resp0 *deploy_config.UpdateServerDeployConfigOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*deploy_config.UpdateServerDeployConfigOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*deploy_config.UpdateServerDeployConfigForbidden)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*deploy_config.UpdateServerDeployConfigNotAcceptable)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*deploy_config.UpdateServerDeployConfigUnprocessableEntity)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelUpdateServerDeployConfigBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUpdateServerDeployConfigBodyAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpdateServerDeployConfigBodyType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUpdateServerDeployConfigBodyAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var attributesFlagName string
	if cmdPrefix == "" {
		attributesFlagName = "attributes"
	} else {
		attributesFlagName = fmt.Sprintf("%v.attributes", cmdPrefix)
	}

	if err := registerModelUpdateServerDeployConfigParamsBodyAttributesFlags(depth+1, attributesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerUpdateServerDeployConfigBodyType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["deploy_config"]. Required. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["deploy_config"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUpdateServerDeployConfigBodyFlags(depth int, m *deploy_config.UpdateServerDeployConfigBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributesAdded := retrieveUpdateServerDeployConfigBodyAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	err, typeAdded := retrieveUpdateServerDeployConfigBodyTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveUpdateServerDeployConfigBodyAttributesFlags(depth int, m *deploy_config.UpdateServerDeployConfigBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%v.attributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// info: complex object attributes UpdateServerDeployConfigParamsBodyAttributes is retrieved outside this Changed() block
	}
	attributesFlagValue := m.Attributes
	if swag.IsZero(attributesFlagValue) {
		attributesFlagValue = &deploy_config.UpdateServerDeployConfigParamsBodyAttributes{}
	}

	err, attributesAdded := retrieveModelUpdateServerDeployConfigParamsBodyAttributesFlags(depth+1, attributesFlagValue, attributesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded
	if attributesAdded {
		m.Attributes = attributesFlagValue
	}

	return nil, retAdded
}

func retrieveUpdateServerDeployConfigBodyTypeFlags(depth int, m *deploy_config.UpdateServerDeployConfigBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// register flags to command
func registerModelUpdateServerDeployConfigParamsBodyAttributesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUpdateServerDeployConfigParamsBodyAttributesHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpdateServerDeployConfigParamsBodyAttributesIpxeURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpdateServerDeployConfigParamsBodyAttributesOperatingSystem(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpdateServerDeployConfigParamsBodyAttributesRaid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpdateServerDeployConfigParamsBodyAttributesSSHKeys(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpdateServerDeployConfigParamsBodyAttributesUserData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUpdateServerDeployConfigParamsBodyAttributesHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostnameDescription := ``

	var hostnameFlagName string
	if cmdPrefix == "" {
		hostnameFlagName = "hostname"
	} else {
		hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
	}

	var hostnameFlagDefault string

	_ = cmd.PersistentFlags().String(hostnameFlagName, hostnameFlagDefault, hostnameDescription)

	return nil
}

func registerUpdateServerDeployConfigParamsBodyAttributesIpxeURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipxeUrlDescription := `URL where iPXE script is stored on, necessary for custom image deployments. This attribute is required when operating system iPXE is selected.`

	var ipxeUrlFlagName string
	if cmdPrefix == "" {
		ipxeUrlFlagName = "ipxe_url"
	} else {
		ipxeUrlFlagName = fmt.Sprintf("%v.ipxe_url", cmdPrefix)
	}

	var ipxeUrlFlagDefault string

	_ = cmd.PersistentFlags().String(ipxeUrlFlagName, ipxeUrlFlagDefault, ipxeUrlDescription)

	return nil
}

func registerUpdateServerDeployConfigParamsBodyAttributesOperatingSystem(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	operatingSystemDescription := `Enum: ["ipxe","windows_server_2019_std_v1","ubuntu_22_04_x64_lts","debian_11","rockylinux_8","debian_10","rhel8","centos_7_4_x64","centos_8_x64","ubuntu_20_04_x64_lts","debian_12","ubuntu22_ml_in_a_box","windows2022"]. `

	var operatingSystemFlagName string
	if cmdPrefix == "" {
		operatingSystemFlagName = "operating_system"
	} else {
		operatingSystemFlagName = fmt.Sprintf("%v.operating_system", cmdPrefix)
	}

	var operatingSystemFlagDefault string

	_ = cmd.PersistentFlags().String(operatingSystemFlagName, operatingSystemFlagDefault, operatingSystemDescription)

	if err := cmd.RegisterFlagCompletionFunc(operatingSystemFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ipxe","windows_server_2019_std_v1","ubuntu_22_04_x64_lts","debian_11","rockylinux_8","debian_10","rhel8","centos_7_4_x64","centos_8_x64","ubuntu_20_04_x64_lts","debian_12","ubuntu22_ml_in_a_box","windows2022"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerUpdateServerDeployConfigParamsBodyAttributesRaid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	raidDescription := `Enum: ["raid-0","raid-1"]. `

	var raidFlagName string
	if cmdPrefix == "" {
		raidFlagName = "raid"
	} else {
		raidFlagName = fmt.Sprintf("%v.raid", cmdPrefix)
	}

	var raidFlagDefault string

	_ = cmd.PersistentFlags().String(raidFlagName, raidFlagDefault, raidDescription)

	if err := cmd.RegisterFlagCompletionFunc(raidFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["raid-0","raid-1"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerUpdateServerDeployConfigParamsBodyAttributesSSHKeys(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ssh_keys []int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerUpdateServerDeployConfigParamsBodyAttributesUserData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userDataDescription := `User data to configure the server`

	var userDataFlagName string
	if cmdPrefix == "" {
		userDataFlagName = "user_data"
	} else {
		userDataFlagName = fmt.Sprintf("%v.user_data", cmdPrefix)
	}

	var userDataFlagDefault int64

	_ = cmd.PersistentFlags().Int64(userDataFlagName, userDataFlagDefault, userDataDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUpdateServerDeployConfigParamsBodyAttributesFlags(depth int, m *deploy_config.UpdateServerDeployConfigParamsBodyAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, hostnameAdded := retrieveUpdateServerDeployConfigParamsBodyAttributesHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostnameAdded

	err, ipxeUrlAdded := retrieveUpdateServerDeployConfigParamsBodyAttributesIpxeURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipxeUrlAdded

	err, operatingSystemAdded := retrieveUpdateServerDeployConfigParamsBodyAttributesOperatingSystemFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || operatingSystemAdded

	err, raidAdded := retrieveUpdateServerDeployConfigParamsBodyAttributesRaidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || raidAdded

	err, sshKeysAdded := retrieveUpdateServerDeployConfigParamsBodyAttributesSSHKeysFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sshKeysAdded

	err, userDataAdded := retrieveUpdateServerDeployConfigParamsBodyAttributesUserDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userDataAdded

	return nil, retAdded
}

func retrieveUpdateServerDeployConfigParamsBodyAttributesHostnameFlags(depth int, m *deploy_config.UpdateServerDeployConfigParamsBodyAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostnameFlagName := fmt.Sprintf("%v.hostname", cmdPrefix)
	if cmd.Flags().Changed(hostnameFlagName) {

		var hostnameFlagName string
		if cmdPrefix == "" {
			hostnameFlagName = "hostname"
		} else {
			hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
		}

		hostnameFlagValue, err := cmd.Flags().GetString(hostnameFlagName)
		if err != nil {
			return err, false
		}
		m.Hostname = &hostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUpdateServerDeployConfigParamsBodyAttributesIpxeURLFlags(depth int, m *deploy_config.UpdateServerDeployConfigParamsBodyAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipxeUrlFlagName := fmt.Sprintf("%v.ipxe_url", cmdPrefix)
	if cmd.Flags().Changed(ipxeUrlFlagName) {

		var ipxeUrlFlagName string
		if cmdPrefix == "" {
			ipxeUrlFlagName = "ipxe_url"
		} else {
			ipxeUrlFlagName = fmt.Sprintf("%v.ipxe_url", cmdPrefix)
		}

		ipxeUrlFlagValue, err := cmd.Flags().GetString(ipxeUrlFlagName)
		if err != nil {
			return err, false
		}
		m.IpxeURL = &ipxeUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUpdateServerDeployConfigParamsBodyAttributesOperatingSystemFlags(depth int, m *deploy_config.UpdateServerDeployConfigParamsBodyAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	operatingSystemFlagName := fmt.Sprintf("%v.operating_system", cmdPrefix)
	if cmd.Flags().Changed(operatingSystemFlagName) {

		var operatingSystemFlagName string
		if cmdPrefix == "" {
			operatingSystemFlagName = "operating_system"
		} else {
			operatingSystemFlagName = fmt.Sprintf("%v.operating_system", cmdPrefix)
		}

		operatingSystemFlagValue, err := cmd.Flags().GetString(operatingSystemFlagName)
		if err != nil {
			return err, false
		}
		m.OperatingSystem = &operatingSystemFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUpdateServerDeployConfigParamsBodyAttributesRaidFlags(depth int, m *deploy_config.UpdateServerDeployConfigParamsBodyAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	raidFlagName := fmt.Sprintf("%v.raid", cmdPrefix)
	if cmd.Flags().Changed(raidFlagName) {

		var raidFlagName string
		if cmdPrefix == "" {
			raidFlagName = "raid"
		} else {
			raidFlagName = fmt.Sprintf("%v.raid", cmdPrefix)
		}

		raidFlagValue, err := cmd.Flags().GetString(raidFlagName)
		if err != nil {
			return err, false
		}
		m.Raid = &raidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUpdateServerDeployConfigParamsBodyAttributesSSHKeysFlags(depth int, m *deploy_config.UpdateServerDeployConfigParamsBodyAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sshKeysFlagName := fmt.Sprintf("%v.ssh_keys", cmdPrefix)
	if cmd.Flags().Changed(sshKeysFlagName) {
		// warning: ssh_keys array type []int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveUpdateServerDeployConfigParamsBodyAttributesUserDataFlags(depth int, m *deploy_config.UpdateServerDeployConfigParamsBodyAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userDataFlagName := fmt.Sprintf("%v.user_data", cmdPrefix)
	if cmd.Flags().Changed(userDataFlagName) {

		var userDataFlagName string
		if cmdPrefix == "" {
			userDataFlagName = "user_data"
		} else {
			userDataFlagName = fmt.Sprintf("%v.user_data", cmdPrefix)
		}

		userDataFlagValue, err := cmd.Flags().GetInt64(userDataFlagName)
		if err != nil {
			return err, false
		}
		m.UserData = &userDataFlagValue

		retAdded = true
	}

	return nil, retAdded
}
