// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/latitudesh/cli/client/teams"
	"github.com/latitudesh/cli/internal/utils"
	"github.com/latitudesh/cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationTeamsPatchCurrentTeamCmd returns a cmd to handle operation patchCurrentTeam
func makeOperationTeamsPatchCurrentTeamCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "patch-current-team",
		Short: ``,
		RunE:  runOperationTeamsPatchCurrentTeam,
	}

	if err := registerOperationTeamsPatchCurrentTeamParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTeamsPatchCurrentTeam uses cmd flags to call endpoint api
func runOperationTeamsPatchCurrentTeam(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := teams.NewPatchCurrentTeamParams()
	params.SetDefaults()
	if err, _ := retrieveOperationTeamsPatchCurrentTeamAPIVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTeamsPatchCurrentTeamBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTeamsPatchCurrentTeamTeamIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTeamsPatchCurrentTeamResult(appCli.Teams.PatchCurrentTeam(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(utils.PrettifyJson(msgStr))
	}
	return nil
}

// registerOperationTeamsPatchCurrentTeamParamFlags registers all flags needed to fill params
func registerOperationTeamsPatchCurrentTeamParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTeamsPatchCurrentTeamAPIVersionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTeamsPatchCurrentTeamBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTeamsPatchCurrentTeamTeamIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTeamsPatchCurrentTeamAPIVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	apiVersionDescription := ``

	var apiVersionFlagName string
	if cmdPrefix == "" {
		apiVersionFlagName = "API-Version"
	} else {
		apiVersionFlagName = fmt.Sprintf("%v.API-Version", cmdPrefix)
	}

	var apiVersionFlagDefault string = "2023-06-01"

	_ = cmd.PersistentFlags().String(apiVersionFlagName, apiVersionFlagDefault, apiVersionDescription)

	return nil
}
func registerOperationTeamsPatchCurrentTeamBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFlagName, "", "Optional json string for [body]. ")

	// add flags for body
	if err := registerModelPatchCurrentTeamBodyFlags(0, "patchCurrentTeamBody", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationTeamsPatchCurrentTeamTeamIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	teamIdDescription := `Required. `

	var teamIdFlagName string
	if cmdPrefix == "" {
		teamIdFlagName = "team_id"
	} else {
		teamIdFlagName = fmt.Sprintf("%v.team_id", cmdPrefix)
	}

	var teamIdFlagDefault string

	_ = cmd.PersistentFlags().String(teamIdFlagName, teamIdFlagDefault, teamIdDescription)

	return nil
}

func retrieveOperationTeamsPatchCurrentTeamAPIVersionFlag(m *teams.PatchCurrentTeamParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("API-Version") {

		var apiVersionFlagName string
		if cmdPrefix == "" {
			apiVersionFlagName = "API-Version"
		} else {
			apiVersionFlagName = fmt.Sprintf("%v.API-Version", cmdPrefix)
		}

		apiVersionFlagValue, err := cmd.Flags().GetString(apiVersionFlagName)
		if err != nil {
			return err, false
		}
		m.APIVersion = &apiVersionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTeamsPatchCurrentTeamBodyFlag(m *teams.PatchCurrentTeamParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := teams.PatchCurrentTeamBody{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in PatchCurrentTeamBody: %v", err), false
		}
		m.Body = bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = teams.PatchCurrentTeamBody{}
	}
	err, added := retrieveModelPatchCurrentTeamBodyFlags(0, &bodyValueModel, "patchCurrentTeamBody", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	if dryRun && debug {

		bodyValueDebugBytes, err := json.Marshal(m.Body)
		if err != nil {
			return err, false
		}
		logDebugf("Body dry-run payload: %v", string(bodyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationTeamsPatchCurrentTeamTeamIDFlag(m *teams.PatchCurrentTeamParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("team_id") {

		var teamIdFlagName string
		if cmdPrefix == "" {
			teamIdFlagName = "team_id"
		} else {
			teamIdFlagName = fmt.Sprintf("%v.team_id", cmdPrefix)
		}

		teamIdFlagValue, err := cmd.Flags().GetString(teamIdFlagName)
		if err != nil {
			return err, false
		}
		m.TeamID = teamIdFlagValue

	}
	return nil, retAdded
}

// parseOperationTeamsPatchCurrentTeamResult parses request result and return the string content
func parseOperationTeamsPatchCurrentTeamResult(resp0 *teams.PatchCurrentTeamOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*teams.PatchCurrentTeamOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*teams.PatchCurrentTeamForbidden)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*teams.PatchCurrentTeamNotFound)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelPatchCurrentTeamBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPatchCurrentTeamBodyData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPatchCurrentTeamBodyData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dataFlagName string
	if cmdPrefix == "" {
		dataFlagName = "data"
	} else {
		dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
	}

	if err := registerModelPatchCurrentTeamParamsBodyDataFlags(depth+1, dataFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPatchCurrentTeamBodyFlags(depth int, m *teams.PatchCurrentTeamBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dataAdded := retrievePatchCurrentTeamBodyDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded

	return nil, retAdded
}

func retrievePatchCurrentTeamBodyDataFlags(depth int, m *teams.PatchCurrentTeamBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataFlagName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(dataFlagName) {
		// info: complex object data PatchCurrentTeamParamsBodyData is retrieved outside this Changed() block
	}
	dataFlagValue := m.Data
	if swag.IsZero(dataFlagValue) {
		dataFlagValue = &teams.PatchCurrentTeamParamsBodyData{}
	}

	err, dataAdded := retrieveModelPatchCurrentTeamParamsBodyDataFlags(depth+1, dataFlagValue, dataFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded
	if dataAdded {
		m.Data = dataFlagValue
	}

	return nil, retAdded
}

// register flags to command
func registerModelPatchCurrentTeamOKBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPatchCurrentTeamOKBodyData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPatchCurrentTeamOKBodyData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dataFlagName string
	if cmdPrefix == "" {
		dataFlagName = "data"
	} else {
		dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
	}

	if err := registerModelTeamFlags(depth+1, dataFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPatchCurrentTeamOKBodyFlags(depth int, m *teams.PatchCurrentTeamOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dataAdded := retrievePatchCurrentTeamOKBodyDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded

	return nil, retAdded
}

func retrievePatchCurrentTeamOKBodyDataFlags(depth int, m *teams.PatchCurrentTeamOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataFlagName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(dataFlagName) {
		// info: complex object data models.Team is retrieved outside this Changed() block
	}
	dataFlagValue := m.Data
	if swag.IsZero(dataFlagValue) {
		dataFlagValue = &models.Team{}
	}

	err, dataAdded := retrieveModelTeamFlags(depth+1, dataFlagValue, dataFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded
	if dataAdded {
		m.Data = dataFlagValue
	}

	return nil, retAdded
}

// register flags to command
func registerModelPatchCurrentTeamParamsBodyDataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPatchCurrentTeamParamsBodyDataAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPatchCurrentTeamParamsBodyDataID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPatchCurrentTeamParamsBodyDataType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPatchCurrentTeamParamsBodyDataAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var attributesFlagName string
	if cmdPrefix == "" {
		attributesFlagName = "attributes"
	} else {
		attributesFlagName = fmt.Sprintf("%v.attributes", cmdPrefix)
	}

	if err := registerModelPatchCurrentTeamParamsBodyDataAttributesFlags(depth+1, attributesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPatchCurrentTeamParamsBodyDataID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. `

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerPatchCurrentTeamParamsBodyDataType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["teams"]. Required. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["teams"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPatchCurrentTeamParamsBodyDataFlags(depth int, m *teams.PatchCurrentTeamParamsBodyData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributesAdded := retrievePatchCurrentTeamParamsBodyDataAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	err, idAdded := retrievePatchCurrentTeamParamsBodyDataIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, typeAdded := retrievePatchCurrentTeamParamsBodyDataTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrievePatchCurrentTeamParamsBodyDataAttributesFlags(depth int, m *teams.PatchCurrentTeamParamsBodyData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%v.attributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// info: complex object attributes PatchCurrentTeamParamsBodyDataAttributes is retrieved outside this Changed() block
	}
	attributesFlagValue := m.Attributes
	if swag.IsZero(attributesFlagValue) {
		attributesFlagValue = &teams.PatchCurrentTeamParamsBodyDataAttributes{}
	}

	err, attributesAdded := retrieveModelPatchCurrentTeamParamsBodyDataAttributesFlags(depth+1, attributesFlagValue, attributesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded
	if attributesAdded {
		m.Attributes = attributesFlagValue
	}

	return nil, retAdded
}

func retrievePatchCurrentTeamParamsBodyDataIDFlags(depth int, m *teams.PatchCurrentTeamParamsBodyData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePatchCurrentTeamParamsBodyDataTypeFlags(depth int, m *teams.PatchCurrentTeamParamsBodyData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// register flags to command
func registerModelPatchCurrentTeamParamsBodyDataAttributesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPatchCurrentTeamParamsBodyDataAttributesAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPatchCurrentTeamParamsBodyDataAttributesCurrency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPatchCurrentTeamParamsBodyDataAttributesDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPatchCurrentTeamParamsBodyDataAttributesName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPatchCurrentTeamParamsBodyDataAttributesReferredCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPatchCurrentTeamParamsBodyDataAttributesAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addressDescription := ``

	var addressFlagName string
	if cmdPrefix == "" {
		addressFlagName = "address"
	} else {
		addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
	}

	var addressFlagDefault string

	_ = cmd.PersistentFlags().String(addressFlagName, addressFlagDefault, addressDescription)

	return nil
}

func registerPatchCurrentTeamParamsBodyDataAttributesCurrency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	currencyDescription := ``

	var currencyFlagName string
	if cmdPrefix == "" {
		currencyFlagName = "currency"
	} else {
		currencyFlagName = fmt.Sprintf("%v.currency", cmdPrefix)
	}

	var currencyFlagDefault string

	_ = cmd.PersistentFlags().String(currencyFlagName, currencyFlagDefault, currencyDescription)

	return nil
}

func registerPatchCurrentTeamParamsBodyDataAttributesDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := ``

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerPatchCurrentTeamParamsBodyDataAttributesName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerPatchCurrentTeamParamsBodyDataAttributesReferredCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	referredCodeDescription := ``

	var referredCodeFlagName string
	if cmdPrefix == "" {
		referredCodeFlagName = "referred_code"
	} else {
		referredCodeFlagName = fmt.Sprintf("%v.referred_code", cmdPrefix)
	}

	var referredCodeFlagDefault string

	_ = cmd.PersistentFlags().String(referredCodeFlagName, referredCodeFlagDefault, referredCodeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPatchCurrentTeamParamsBodyDataAttributesFlags(depth int, m *teams.PatchCurrentTeamParamsBodyDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addressAdded := retrievePatchCurrentTeamParamsBodyDataAttributesAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addressAdded

	err, currencyAdded := retrievePatchCurrentTeamParamsBodyDataAttributesCurrencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || currencyAdded

	err, descriptionAdded := retrievePatchCurrentTeamParamsBodyDataAttributesDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, nameAdded := retrievePatchCurrentTeamParamsBodyDataAttributesNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, referredCodeAdded := retrievePatchCurrentTeamParamsBodyDataAttributesReferredCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || referredCodeAdded

	return nil, retAdded
}

func retrievePatchCurrentTeamParamsBodyDataAttributesAddressFlags(depth int, m *teams.PatchCurrentTeamParamsBodyDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addressFlagName := fmt.Sprintf("%v.address", cmdPrefix)
	if cmd.Flags().Changed(addressFlagName) {

		var addressFlagName string
		if cmdPrefix == "" {
			addressFlagName = "address"
		} else {
			addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
		}

		addressFlagValue, err := cmd.Flags().GetString(addressFlagName)
		if err != nil {
			return err, false
		}
		m.Address = addressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePatchCurrentTeamParamsBodyDataAttributesCurrencyFlags(depth int, m *teams.PatchCurrentTeamParamsBodyDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	currencyFlagName := fmt.Sprintf("%v.currency", cmdPrefix)
	if cmd.Flags().Changed(currencyFlagName) {

		var currencyFlagName string
		if cmdPrefix == "" {
			currencyFlagName = "currency"
		} else {
			currencyFlagName = fmt.Sprintf("%v.currency", cmdPrefix)
		}

		currencyFlagValue, err := cmd.Flags().GetString(currencyFlagName)
		if err != nil {
			return err, false
		}
		m.Currency = currencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePatchCurrentTeamParamsBodyDataAttributesDescriptionFlags(depth int, m *teams.PatchCurrentTeamParamsBodyDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePatchCurrentTeamParamsBodyDataAttributesNameFlags(depth int, m *teams.PatchCurrentTeamParamsBodyDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePatchCurrentTeamParamsBodyDataAttributesReferredCodeFlags(depth int, m *teams.PatchCurrentTeamParamsBodyDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	referredCodeFlagName := fmt.Sprintf("%v.referred_code", cmdPrefix)
	if cmd.Flags().Changed(referredCodeFlagName) {

		var referredCodeFlagName string
		if cmdPrefix == "" {
			referredCodeFlagName = "referred_code"
		} else {
			referredCodeFlagName = fmt.Sprintf("%v.referred_code", cmdPrefix)
		}

		referredCodeFlagValue, err := cmd.Flags().GetString(referredCodeFlagName)
		if err != nil {
			return err, false
		}
		m.ReferredCode = referredCodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
