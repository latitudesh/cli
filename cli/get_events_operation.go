// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/latitudesh/cli/client/events"
	"github.com/latitudesh/cli/internal/utils"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationEventsGetEventsCmd returns a cmd to handle operation getEvents
func makeOperationEventsGetEventsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "get-events",
		Short: `Lists all events.
`,
		RunE: runOperationEventsGetEvents,
	}

	if err := registerOperationEventsGetEventsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationEventsGetEvents uses cmd flags to call endpoint api
func runOperationEventsGetEvents(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := events.NewGetEventsParams()
	params.SetDefaults()
	if err, _ := retrieveOperationEventsGetEventsAPIVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEventsGetEventsFilterActionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEventsGetEventsFilterAuthorFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEventsGetEventsFilterCreatedAtFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEventsGetEventsFilterCreatedAtGteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEventsGetEventsFilterCreatedAtLteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEventsGetEventsFilterProjectFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEventsGetEventsFilterTargetIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEventsGetEventsFilterTargetNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationEventsGetEventsResult(appCli.Events.GetEvents(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(utils.PrettifyJson(msgStr))
	}
	return nil
}

// registerOperationEventsGetEventsParamFlags registers all flags needed to fill params
func registerOperationEventsGetEventsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationEventsGetEventsAPIVersionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEventsGetEventsFilterActionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEventsGetEventsFilterAuthorParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEventsGetEventsFilterCreatedAtParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEventsGetEventsFilterCreatedAtGteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEventsGetEventsFilterCreatedAtLteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEventsGetEventsFilterProjectParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEventsGetEventsFilterTargetIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEventsGetEventsFilterTargetNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationEventsGetEventsAPIVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	apiVersionDescription := ``

	var apiVersionFlagName string
	if cmdPrefix == "" {
		apiVersionFlagName = "API-Version"
	} else {
		apiVersionFlagName = fmt.Sprintf("%v.API-Version", cmdPrefix)
	}

	var apiVersionFlagDefault string = "2023-06-01"

	_ = cmd.PersistentFlags().String(apiVersionFlagName, apiVersionFlagDefault, apiVersionDescription)

	return nil
}
func registerOperationEventsGetEventsFilterActionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	filterActionDescription := `The action performed in event to filter by`

	var filterActionFlagName string
	if cmdPrefix == "" {
		filterActionFlagName = "filter[action]"
	} else {
		filterActionFlagName = fmt.Sprintf("%v.filter[action]", cmdPrefix)
	}

	var filterActionFlagDefault string

	_ = cmd.PersistentFlags().String(filterActionFlagName, filterActionFlagDefault, filterActionDescription)

	return nil
}
func registerOperationEventsGetEventsFilterAuthorParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	filterAuthorDescription := `The author ID or email to filter by`

	var filterAuthorFlagName string
	if cmdPrefix == "" {
		filterAuthorFlagName = "filter[author]"
	} else {
		filterAuthorFlagName = fmt.Sprintf("%v.filter[author]", cmdPrefix)
	}

	var filterAuthorFlagDefault string

	_ = cmd.PersistentFlags().String(filterAuthorFlagName, filterAuthorFlagDefault, filterAuthorDescription)

	return nil
}
func registerOperationEventsGetEventsFilterCreatedAtParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	filterCreatedAtDescription := `The created at between date range date1, date2 (inclusive) to filter by, in ISO formatting (yyyy-MM-dd'T'HH:mm:ss)`

	var filterCreatedAtFlagName string
	if cmdPrefix == "" {
		filterCreatedAtFlagName = "filter[created_at]"
	} else {
		filterCreatedAtFlagName = fmt.Sprintf("%v.filter[created_at]", cmdPrefix)
	}

	var filterCreatedAtFlagDefault []string

	_ = cmd.PersistentFlags().StringSlice(filterCreatedAtFlagName, filterCreatedAtFlagDefault, filterCreatedAtDescription)

	return nil
}
func registerOperationEventsGetEventsFilterCreatedAtGteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	filterCreatedAtGteDescription := `The created at greater than equal date to filter by, in ISO formatting (yyyy-MM-dd'T'HH:mm:ss)`

	var filterCreatedAtGteFlagName string
	if cmdPrefix == "" {
		filterCreatedAtGteFlagName = "filter[created_at][gte]"
	} else {
		filterCreatedAtGteFlagName = fmt.Sprintf("%v.filter[created_at][gte]", cmdPrefix)
	}

	var filterCreatedAtGteFlagDefault string

	_ = cmd.PersistentFlags().String(filterCreatedAtGteFlagName, filterCreatedAtGteFlagDefault, filterCreatedAtGteDescription)

	return nil
}
func registerOperationEventsGetEventsFilterCreatedAtLteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	filterCreatedAtLteDescription := `The created at less than equal date to filter by, in ISO formatting (yyyy-MM-dd'T'HH:mm:ss)`

	var filterCreatedAtLteFlagName string
	if cmdPrefix == "" {
		filterCreatedAtLteFlagName = "filter[created_at][lte]"
	} else {
		filterCreatedAtLteFlagName = fmt.Sprintf("%v.filter[created_at][lte]", cmdPrefix)
	}

	var filterCreatedAtLteFlagDefault string

	_ = cmd.PersistentFlags().String(filterCreatedAtLteFlagName, filterCreatedAtLteFlagDefault, filterCreatedAtLteDescription)

	return nil
}
func registerOperationEventsGetEventsFilterProjectParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	filterProjectDescription := `The project ID to filter by`

	var filterProjectFlagName string
	if cmdPrefix == "" {
		filterProjectFlagName = "filter[project]"
	} else {
		filterProjectFlagName = fmt.Sprintf("%v.filter[project]", cmdPrefix)
	}

	var filterProjectFlagDefault string

	_ = cmd.PersistentFlags().String(filterProjectFlagName, filterProjectFlagDefault, filterProjectDescription)

	return nil
}
func registerOperationEventsGetEventsFilterTargetIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	filterTargetIdDescription := `The target id of the event to filter by`

	var filterTargetIdFlagName string
	if cmdPrefix == "" {
		filterTargetIdFlagName = "filter[target_id]"
	} else {
		filterTargetIdFlagName = fmt.Sprintf("%v.filter[target_id]", cmdPrefix)
	}

	var filterTargetIdFlagDefault string

	_ = cmd.PersistentFlags().String(filterTargetIdFlagName, filterTargetIdFlagDefault, filterTargetIdDescription)

	return nil
}
func registerOperationEventsGetEventsFilterTargetNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	filterTargetNameDescription := `The target type(s) of the event to filter by`

	var filterTargetNameFlagName string
	if cmdPrefix == "" {
		filterTargetNameFlagName = "filter[target_name]"
	} else {
		filterTargetNameFlagName = fmt.Sprintf("%v.filter[target_name]", cmdPrefix)
	}

	var filterTargetNameFlagDefault []string

	_ = cmd.PersistentFlags().StringSlice(filterTargetNameFlagName, filterTargetNameFlagDefault, filterTargetNameDescription)

	return nil
}

func retrieveOperationEventsGetEventsAPIVersionFlag(m *events.GetEventsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("API-Version") {

		var apiVersionFlagName string
		if cmdPrefix == "" {
			apiVersionFlagName = "API-Version"
		} else {
			apiVersionFlagName = fmt.Sprintf("%v.API-Version", cmdPrefix)
		}

		apiVersionFlagValue, err := cmd.Flags().GetString(apiVersionFlagName)
		if err != nil {
			return err, false
		}
		m.APIVersion = &apiVersionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEventsGetEventsFilterActionFlag(m *events.GetEventsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("filter[action]") {

		var filterActionFlagName string
		if cmdPrefix == "" {
			filterActionFlagName = "filter[action]"
		} else {
			filterActionFlagName = fmt.Sprintf("%v.filter[action]", cmdPrefix)
		}

		filterActionFlagValue, err := cmd.Flags().GetString(filterActionFlagName)
		if err != nil {
			return err, false
		}
		m.FilterAction = &filterActionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEventsGetEventsFilterAuthorFlag(m *events.GetEventsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("filter[author]") {

		var filterAuthorFlagName string
		if cmdPrefix == "" {
			filterAuthorFlagName = "filter[author]"
		} else {
			filterAuthorFlagName = fmt.Sprintf("%v.filter[author]", cmdPrefix)
		}

		filterAuthorFlagValue, err := cmd.Flags().GetString(filterAuthorFlagName)
		if err != nil {
			return err, false
		}
		m.FilterAuthor = &filterAuthorFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEventsGetEventsFilterCreatedAtFlag(m *events.GetEventsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("filter[created_at]") {

		var filterCreatedAtFlagName string
		if cmdPrefix == "" {
			filterCreatedAtFlagName = "filter[created_at]"
		} else {
			filterCreatedAtFlagName = fmt.Sprintf("%v.filter[created_at]", cmdPrefix)
		}

		filterCreatedAtFlagValues, err := cmd.Flags().GetStringSlice(filterCreatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.FilterCreatedAt = filterCreatedAtFlagValues

	}
	return nil, retAdded
}
func retrieveOperationEventsGetEventsFilterCreatedAtGteFlag(m *events.GetEventsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("filter[created_at][gte]") {

		var filterCreatedAtGteFlagName string
		if cmdPrefix == "" {
			filterCreatedAtGteFlagName = "filter[created_at][gte]"
		} else {
			filterCreatedAtGteFlagName = fmt.Sprintf("%v.filter[created_at][gte]", cmdPrefix)
		}

		filterCreatedAtGteFlagValue, err := cmd.Flags().GetString(filterCreatedAtGteFlagName)
		if err != nil {
			return err, false
		}
		m.FilterCreatedAtGte = &filterCreatedAtGteFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEventsGetEventsFilterCreatedAtLteFlag(m *events.GetEventsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("filter[created_at][lte]") {

		var filterCreatedAtLteFlagName string
		if cmdPrefix == "" {
			filterCreatedAtLteFlagName = "filter[created_at][lte]"
		} else {
			filterCreatedAtLteFlagName = fmt.Sprintf("%v.filter[created_at][lte]", cmdPrefix)
		}

		filterCreatedAtLteFlagValue, err := cmd.Flags().GetString(filterCreatedAtLteFlagName)
		if err != nil {
			return err, false
		}
		m.FilterCreatedAtLte = &filterCreatedAtLteFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEventsGetEventsFilterProjectFlag(m *events.GetEventsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("filter[project]") {

		var filterProjectFlagName string
		if cmdPrefix == "" {
			filterProjectFlagName = "filter[project]"
		} else {
			filterProjectFlagName = fmt.Sprintf("%v.filter[project]", cmdPrefix)
		}

		filterProjectFlagValue, err := cmd.Flags().GetString(filterProjectFlagName)
		if err != nil {
			return err, false
		}
		m.FilterProject = &filterProjectFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEventsGetEventsFilterTargetIDFlag(m *events.GetEventsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("filter[target_id]") {

		var filterTargetIdFlagName string
		if cmdPrefix == "" {
			filterTargetIdFlagName = "filter[target_id]"
		} else {
			filterTargetIdFlagName = fmt.Sprintf("%v.filter[target_id]", cmdPrefix)
		}

		filterTargetIdFlagValue, err := cmd.Flags().GetString(filterTargetIdFlagName)
		if err != nil {
			return err, false
		}
		m.FilterTargetID = &filterTargetIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEventsGetEventsFilterTargetNameFlag(m *events.GetEventsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("filter[target_name]") {

		var filterTargetNameFlagName string
		if cmdPrefix == "" {
			filterTargetNameFlagName = "filter[target_name]"
		} else {
			filterTargetNameFlagName = fmt.Sprintf("%v.filter[target_name]", cmdPrefix)
		}

		filterTargetNameFlagValues, err := cmd.Flags().GetStringSlice(filterTargetNameFlagName)
		if err != nil {
			return err, false
		}
		m.FilterTargetName = filterTargetNameFlagValues

	}
	return nil, retAdded
}

// parseOperationEventsGetEventsResult parses request result and return the string content
func parseOperationEventsGetEventsResult(resp0 *events.GetEventsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*events.GetEventsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelGetEventsOKBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGetEventsOKBodyData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGetEventsOKBodyData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: data []*models.Events array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGetEventsOKBodyFlags(depth int, m *events.GetEventsOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dataAdded := retrieveGetEventsOKBodyDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded

	return nil, retAdded
}

func retrieveGetEventsOKBodyDataFlags(depth int, m *events.GetEventsOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataFlagName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(dataFlagName) {
		// warning: data array type []*models.Events is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
