// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/latitudesh/cli/client/user_data"
	"github.com/latitudesh/cli/internal/utils"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationUserDataGetProjectUsersDataCmd returns a cmd to handle operation getProjectUsersData
func makeOperationUserDataGetProjectUsersDataCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "get-project-users-data",
		Short: `List all Users Data in the project. These scripts can be used to configure servers with user data.
`,
		RunE: runOperationUserDataGetProjectUsersData,
	}

	if err := registerOperationUserDataGetProjectUsersDataParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationUserDataGetProjectUsersData uses cmd flags to call endpoint api
func runOperationUserDataGetProjectUsersData(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := user_data.NewGetProjectUsersDataParams()
	params.SetDefaults()
	if err, _ := retrieveOperationUserDataGetProjectUsersDataAPIVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUserDataGetProjectUsersDataExtraFieldsUserDataFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUserDataGetProjectUsersDataProjectIDOrSlugFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationUserDataGetProjectUsersDataResult(appCli.UserData.GetProjectUsersData(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(utils.PrettifyJson(msgStr))
	}
	return nil
}

// registerOperationUserDataGetProjectUsersDataParamFlags registers all flags needed to fill params
func registerOperationUserDataGetProjectUsersDataParamFlags(cmd *cobra.Command) error {
	if err := registerOperationUserDataGetProjectUsersDataAPIVersionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUserDataGetProjectUsersDataExtraFieldsUserDataParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUserDataGetProjectUsersDataProjectIDOrSlugParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationUserDataGetProjectUsersDataAPIVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	apiVersionDescription := ``

	var apiVersionFlagName string
	if cmdPrefix == "" {
		apiVersionFlagName = "API-Version"
	} else {
		apiVersionFlagName = fmt.Sprintf("%v.API-Version", cmdPrefix)
	}

	var apiVersionFlagDefault string = "2023-06-01"

	_ = cmd.PersistentFlags().String(apiVersionFlagName, apiVersionFlagDefault, apiVersionDescription)

	return nil
}
func registerOperationUserDataGetProjectUsersDataExtraFieldsUserDataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	extraFieldsUserDataDescription := `The ` + "`" + `decoded_content` + "`" + ` is provided as an extra attribute that shows content in decoded form.`

	var extraFieldsUserDataFlagName string
	if cmdPrefix == "" {
		extraFieldsUserDataFlagName = "extra_fields[user_data]"
	} else {
		extraFieldsUserDataFlagName = fmt.Sprintf("%v.extra_fields[user_data]", cmdPrefix)
	}

	var extraFieldsUserDataFlagDefault string = "decoded_content"

	_ = cmd.PersistentFlags().String(extraFieldsUserDataFlagName, extraFieldsUserDataFlagDefault, extraFieldsUserDataDescription)

	return nil
}
func registerOperationUserDataGetProjectUsersDataProjectIDOrSlugParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	projectIdOrSlugDescription := `Required. `

	var projectIdOrSlugFlagName string
	if cmdPrefix == "" {
		projectIdOrSlugFlagName = "project_id_or_slug"
	} else {
		projectIdOrSlugFlagName = fmt.Sprintf("%v.project_id_or_slug", cmdPrefix)
	}

	var projectIdOrSlugFlagDefault string

	_ = cmd.PersistentFlags().String(projectIdOrSlugFlagName, projectIdOrSlugFlagDefault, projectIdOrSlugDescription)

	return nil
}

func retrieveOperationUserDataGetProjectUsersDataAPIVersionFlag(m *user_data.GetProjectUsersDataParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("API-Version") {

		var apiVersionFlagName string
		if cmdPrefix == "" {
			apiVersionFlagName = "API-Version"
		} else {
			apiVersionFlagName = fmt.Sprintf("%v.API-Version", cmdPrefix)
		}

		apiVersionFlagValue, err := cmd.Flags().GetString(apiVersionFlagName)
		if err != nil {
			return err, false
		}
		m.APIVersion = &apiVersionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUserDataGetProjectUsersDataExtraFieldsUserDataFlag(m *user_data.GetProjectUsersDataParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("extra_fields[user_data]") {

		var extraFieldsUserDataFlagName string
		if cmdPrefix == "" {
			extraFieldsUserDataFlagName = "extra_fields[user_data]"
		} else {
			extraFieldsUserDataFlagName = fmt.Sprintf("%v.extra_fields[user_data]", cmdPrefix)
		}

		extraFieldsUserDataFlagValue, err := cmd.Flags().GetString(extraFieldsUserDataFlagName)
		if err != nil {
			return err, false
		}
		m.ExtraFieldsUserData = &extraFieldsUserDataFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUserDataGetProjectUsersDataProjectIDOrSlugFlag(m *user_data.GetProjectUsersDataParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("project_id_or_slug") {

		var projectIdOrSlugFlagName string
		if cmdPrefix == "" {
			projectIdOrSlugFlagName = "project_id_or_slug"
		} else {
			projectIdOrSlugFlagName = fmt.Sprintf("%v.project_id_or_slug", cmdPrefix)
		}

		projectIdOrSlugFlagValue, err := cmd.Flags().GetString(projectIdOrSlugFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectIDOrSlug = projectIdOrSlugFlagValue

	}
	return nil, retAdded
}

// parseOperationUserDataGetProjectUsersDataResult parses request result and return the string content
func parseOperationUserDataGetProjectUsersDataResult(resp0 *user_data.GetProjectUsersDataOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*user_data.GetProjectUsersDataOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning getProjectUsersDataNotFound is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelGetProjectUsersDataOKBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGetProjectUsersDataOKBodyData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGetProjectUsersDataOKBodyData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: data []*models.UserData array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGetProjectUsersDataOKBodyFlags(depth int, m *user_data.GetProjectUsersDataOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dataAdded := retrieveGetProjectUsersDataOKBodyDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded

	return nil, retAdded
}

func retrieveGetProjectUsersDataOKBodyDataFlags(depth int, m *user_data.GetProjectUsersDataOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataFlagName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(dataFlagName) {
		// warning: data array type []*models.UserData is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
