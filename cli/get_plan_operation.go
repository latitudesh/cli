package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/latitudesh/lsh/client/plans"
	"github.com/latitudesh/lsh/internal/utils"

	"github.com/spf13/cobra"
)

// makeOperationPlansGetPlanCmd returns a cmd to handle operation getPlan
func makeOperationPlansGetPlanCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "get",
		Short: `Returns a plan`,
		RunE:  runOperationPlansGetPlan,
	}

	if err := registerOperationPlansGetPlanParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationPlansGetPlan uses cmd flags to call endpoint api
func runOperationPlansGetPlan(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := plans.NewGetPlanParams()
	if err, _ := retrieveOperationPlansGetPlanPlanIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}

	response, err := appCli.Plans.GetPlan(params, nil)
	if err != nil {
		utils.PrintError(err)
		return nil
	}

	if !debug {
		utils.Render(response.GetData())
	}
	return nil
}

// registerOperationPlansGetPlanParamFlags registers all flags needed to fill params
func registerOperationPlansGetPlanParamFlags(cmd *cobra.Command) error {
	if err := registerOperationPlansGetPlanPlanIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationPlansGetPlanPlanIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	planIdDescription := `Required. `

	var planIdFlagName string
	if cmdPrefix == "" {
		planIdFlagName = "id"
	} else {
		planIdFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var planIdFlagDefault string

	_ = cmd.PersistentFlags().String(planIdFlagName, planIdFlagDefault, planIdDescription)
	cmd.MarkPersistentFlagRequired(planIdFlagName)

	return nil
}

func retrieveOperationPlansGetPlanPlanIDFlag(m *plans.GetPlanParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var planIdFlagName string
		if cmdPrefix == "" {
			planIdFlagName = "id"
		} else {
			planIdFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		planIdFlagValue, err := cmd.Flags().GetString(planIdFlagName)
		if err != nil {
			return err, false
		}
		m.PlanID = planIdFlagValue

	}
	return nil, retAdded
}
